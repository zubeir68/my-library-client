import { Opcodes } from './lib/opcodes';
export { Opcodes as Ops } from './lib/opcodes';
export function is(variant) {
    return function (value) {
        return Array.isArray(value) && value[0] === variant;
    };
}
// Statements
export const isFlushElement = is(Opcodes.FlushElement);
export const isAttrSplat = is(Opcodes.AttrSplat);
export function isAttribute(val) {
    return val[0] === Opcodes.StaticAttr || val[0] === Opcodes.DynamicAttr || val[0] === Opcodes.TrustingAttr;
}
export function isArgument(val) {
    return val[0] === Opcodes.StaticArg || val[0] === Opcodes.DynamicArg;
}
// Expressions
export const isGet = is(Opcodes.Get);
export const isMaybeLocal = is(Opcodes.MaybeLocal);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,