'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Parser = undefined;

var _simpleHtmlTokenizer = require('simple-html-tokenizer');

var _util = require('@glimmer/util');

const entityParser = new _simpleHtmlTokenizer.EntityParser(_simpleHtmlTokenizer.HTML5NamedCharRefs);
class Parser {
    constructor(source) {
        this.elementStack = [];
        this.currentAttribute = null;
        this.currentNode = null;
        this.tokenizer = new _simpleHtmlTokenizer.EventedTokenizer(this, entityParser);
        this.source = source.split(/(?:\r\n?|\n)/g);
    }
    get currentAttr() {
        return this.currentAttribute;
    }
    get currentTag() {
        let node = this.currentNode;
        false && (0, _util.assert)(node && (node.type === 'StartTag' || node.type === 'EndTag'), 'expected tag');

        return node;
    }
    get currentStartTag() {
        let node = this.currentNode;
        false && (0, _util.assert)(node && node.type === 'StartTag', 'expected start tag');

        return node;
    }
    get currentEndTag() {
        let node = this.currentNode;
        false && (0, _util.assert)(node && node.type === 'EndTag', 'expected end tag');

        return node;
    }
    get currentComment() {
        let node = this.currentNode;
        false && (0, _util.assert)(node && node.type === 'CommentStatement', 'expected a comment');

        return node;
    }
    get currentData() {
        let node = this.currentNode;
        false && (0, _util.assert)(node && node.type === 'TextNode', 'expected a text node');

        return node;
    }
    acceptNode(node) {
        return this[node.type](node);
    }
    currentElement() {
        return this.elementStack[this.elementStack.length - 1];
    }
    sourceForNode(node, endNode) {
        let firstLine = node.loc.start.line - 1;
        let currentLine = firstLine - 1;
        let firstColumn = node.loc.start.column;
        let string = [];
        let line;
        let lastLine;
        let lastColumn;
        if (endNode) {
            lastLine = endNode.loc.end.line - 1;
            lastColumn = endNode.loc.end.column;
        } else {
            lastLine = node.loc.end.line - 1;
            lastColumn = node.loc.end.column;
        }
        while (currentLine < lastLine) {
            currentLine++;
            line = this.source[currentLine];
            if (currentLine === firstLine) {
                if (firstLine === lastLine) {
                    string.push(line.slice(firstColumn, lastColumn));
                } else {
                    string.push(line.slice(firstColumn));
                }
            } else if (currentLine === lastLine) {
                string.push(line.slice(0, lastColumn));
            } else {
                string.push(line);
            }
        }
        return string.join('\n');
    }
}
exports.Parser = Parser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvc3ludGF4L2xpYi9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLEFBQU8sQUFDTCxBQUFnQixBQUNoQixBQUFZLEFBQ1osQUFBa0IsQUFBSSxBQUFhLEFBQ3BDLEFBQU0sQUFBdUIsQUFBQzs7QUFLL0IsQUFBTyxBQUFFLEFBQU0sQUFBRSxBQUFNLEFBQUUsQUFBTSxBQUFlLEFBQUM7O0FBRS9DLE1BQU0sQUFBWSxlQUFHLEFBQUksQUFBWSxBQUFDLEFBQWEsQUFBQyxBQUFDLEFBd0JyRCxBQUFNOztnQkFTUSxBQUFjLFFBUmhCO2FBQVksZUFBYyxBQUFFLEFBQUMsQUFFaEM7YUFBZ0IsbUJBQXNCLEFBQUksQUFBQyxBQUMzQzthQUFXLGNBRWQsQUFBSSxBQUFDLEFBQ0Y7YUFBUyxZQUFHLEFBQUksQUFBZ0IsMENBQUMsQUFBSSxNQUFFLEFBQVksQUFBQyxBQUFDLEFBRzFELEFBQUk7YUFBQyxBQUFNLFNBQUcsQUFBTSxPQUFDLEFBQUssTUFBQyxBQUFlLEFBQUMsQUFBQyxBQUM5QyxBQUFDO0FBc0JEO1FBQUksQUFBVyxjQUNiLEFBQU8sQUFBTTtlQUFDLEFBQUksS0FBQyxBQUFnQixBQUFFLEFBQW9CLEFBQUMsQUFBQyxBQUM3RCxBQUFDO0FBRUQ7UUFBSSxBQUFVLGFBQ1o7WUFBSSxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQVcsQUFBQztpQkFDNUIsQUFBTSxrQkFBQyxBQUFJLEFBQUksU0FBQyxBQUFJLEtBQUMsQUFBSSxTQUFLLEFBQVUsY0FBSSxBQUFJLEtBQUMsQUFBSSxTQUFLLEFBQVEsQUFBQyxXQUFFLEFBQWMsQUFBQyxBQUFDLEFBQ3JGOztlQUFPLEFBQWtDLEFBQUMsQUFDNUMsQUFBQztBQUVEO1FBQUksQUFBZSxrQkFDakI7WUFBSSxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQVcsQUFBQztp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QUMsQUFBQyxBQUFDLEFBQ3hDO0FBRk0sbUJBRUEsQUFDTCxBQUFNO3VCQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQyxBQUNuQjtBQUNGO0FBRUQ7ZUFBTyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQzNCLEFBQUMsQUFDRjs7QUF6R0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBFdmVudGVkVG9rZW5pemVyLFxuICBFbnRpdHlQYXJzZXIsXG4gIEhUTUw1TmFtZWRDaGFyUmVmcyBhcyBuYW1lZENoYXJSZWZzLFxufSBmcm9tICdzaW1wbGUtaHRtbC10b2tlbml6ZXInO1xuaW1wb3J0IHsgUHJvZ3JhbSB9IGZyb20gJy4vdHlwZXMvbm9kZXMnO1xuaW1wb3J0ICogYXMgQVNUIGZyb20gJy4vdHlwZXMvbm9kZXMnO1xuaW1wb3J0ICogYXMgSGFuZGxlYmFyc0FTVCBmcm9tICcuL3R5cGVzL2hhbmRsZWJhcnMtYXN0JztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgYXNzZXJ0LCBleHBlY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcblxuY29uc3QgZW50aXR5UGFyc2VyID0gbmV3IEVudGl0eVBhcnNlcihuYW1lZENoYXJSZWZzKTtcblxuZXhwb3J0IHR5cGUgRWxlbWVudCA9IEFTVC5Qcm9ncmFtIHwgQVNULkVsZW1lbnROb2RlO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRhZzxUIGV4dGVuZHMgJ1N0YXJ0VGFnJyB8ICdFbmRUYWcnPiB7XG4gIHR5cGU6IFQ7XG4gIG5hbWU6IHN0cmluZztcbiAgYXR0cmlidXRlczogYW55W107XG4gIG1vZGlmaWVyczogYW55W107XG4gIGNvbW1lbnRzOiBhbnlbXTtcbiAgc2VsZkNsb3Npbmc6IGJvb2xlYW47XG4gIGxvYzogQVNULlNvdXJjZUxvY2F0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF0dHJpYnV0ZSB7XG4gIG5hbWU6IHN0cmluZztcbiAgcGFydHM6IChBU1QuTXVzdGFjaGVTdGF0ZW1lbnQgfCBBU1QuVGV4dE5vZGUpW107XG4gIGlzUXVvdGVkOiBib29sZWFuO1xuICBpc0R5bmFtaWM6IGJvb2xlYW47XG4gIHN0YXJ0OiBBU1QuUG9zaXRpb247XG4gIHZhbHVlU3RhcnRMaW5lOiBudW1iZXI7XG4gIHZhbHVlU3RhcnRDb2x1bW46IG51bWJlcjtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBhcnNlciB7XG4gIHByb3RlY3RlZCBlbGVtZW50U3RhY2s6IEVsZW1lbnRbXSA9IFtdO1xuICBwcml2YXRlIHNvdXJjZTogc3RyaW5nW107XG4gIHB1YmxpYyBjdXJyZW50QXR0cmlidXRlOiBPcHRpb248QXR0cmlidXRlPiA9IG51bGw7XG4gIHB1YmxpYyBjdXJyZW50Tm9kZTogT3B0aW9uPFxuICAgIEFTVC5Db21tZW50U3RhdGVtZW50IHwgQVNULlRleHROb2RlIHwgVGFnPCdTdGFydFRhZycgfCAnRW5kVGFnJz5cbiAgPiA9IG51bGw7XG4gIHB1YmxpYyB0b2tlbml6ZXIgPSBuZXcgRXZlbnRlZFRva2VuaXplcih0aGlzLCBlbnRpdHlQYXJzZXIpO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2Uuc3BsaXQoLyg/Olxcclxcbj98XFxuKS9nKTtcbiAgfVxuXG4gIGFic3RyYWN0IHJlc2V0KCk6IHZvaWQ7XG4gIGFic3RyYWN0IGZpbmlzaERhdGEoKTogdm9pZDtcbiAgYWJzdHJhY3QgdGFnT3BlbigpOiB2b2lkO1xuICBhYnN0cmFjdCBiZWdpbkRhdGEoKTogdm9pZDtcbiAgYWJzdHJhY3QgYXBwZW5kVG9EYXRhKGNoYXI6IHN0cmluZyk6IHZvaWQ7XG4gIGFic3RyYWN0IGJlZ2luU3RhcnRUYWcoKTogdm9pZDtcbiAgYWJzdHJhY3QgYXBwZW5kVG9UYWdOYW1lKGNoYXI6IHN0cmluZyk6IHZvaWQ7XG4gIGFic3RyYWN0IGJlZ2luQXR0cmlidXRlKCk6IHZvaWQ7XG4gIGFic3RyYWN0IGFwcGVuZFRvQXR0cmlidXRlTmFtZShjaGFyOiBzdHJpbmcpOiB2b2lkO1xuICBhYnN0cmFjdCBiZWdpbkF0dHJpYnV0ZVZhbHVlKHF1b3RlZDogYm9vbGVhbik6IHZvaWQ7XG4gIGFic3RyYWN0IGFwcGVuZFRvQXR0cmlidXRlVmFsdWUoY2hhcjogc3RyaW5nKTogdm9pZDtcbiAgYWJzdHJhY3QgZmluaXNoQXR0cmlidXRlVmFsdWUoKTogdm9pZDtcbiAgYWJzdHJhY3QgbWFya1RhZ0FzU2VsZkNsb3NpbmcoKTogdm9pZDtcbiAgYWJzdHJhY3QgYmVnaW5FbmRUYWcoKTogdm9pZDtcbiAgYWJzdHJhY3QgZmluaXNoVGFnKCk6IHZvaWQ7XG4gIGFic3RyYWN0IGJlZ2luQ29tbWVudCgpOiB2b2lkO1xuICBhYnN0cmFjdCBhcHBlbmRUb0NvbW1lbnREYXRhKGNoYXI6IHN0cmluZyk6IHZvaWQ7XG4gIGFic3RyYWN0IGZpbmlzaENvbW1lbnQoKTogdm9pZDtcbiAgYWJzdHJhY3QgcmVwb3J0U3ludGF4RXJyb3IoZXJyb3I6IHN0cmluZyk6IHZvaWQ7XG5cbiAgZ2V0IGN1cnJlbnRBdHRyKCk6IEF0dHJpYnV0ZSB7XG4gICAgcmV0dXJuIGV4cGVjdCh0aGlzLmN1cnJlbnRBdHRyaWJ1dGUsICdleHBlY3RlZCBhdHRyaWJ1dGUnKTtcbiAgfVxuXG4gIGdldCBjdXJyZW50VGFnKCk6IFRhZzwnU3RhcnRUYWcnIHwgJ0VuZFRhZyc+IHtcbiAgICBsZXQgbm9kZSA9IHRoaXMuY3VycmVudE5vZGU7XG4gICAgYXNzZXJ0KG5vZGUgJiYgKG5vZGUudHlwZSA9PT0gJ1N0YXJ0VGFnJyB8fCBub2RlLnR5cGUgPT09ICdFbmRUYWcnKSwgJ2V4cGVjdGVkIHRhZycpO1xuICAgIHJldHVybiBub2RlIGFzIFRhZzwnU3RhcnRUYWcnIHwgJ0VuZFRhZyc+O1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRTdGFydFRhZygpOiBUYWc8J1N0YXJ0VGFnJz4ge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiBub2RlLnR5cGUgPT09ICdTdGFydFRhZycsICdleHBlY3RlZCBzdGFydCB0YWcnKTtcbiAgICByZXR1cm4gbm9kZSBhcyBUYWc8J1N0YXJ0VGFnJz47XG4gIH1cblxuICBnZXQgY3VycmVudEVuZFRhZygpOiBUYWc8J0VuZFRhZyc+IHtcbiAgICBsZXQgbm9kZSA9IHRoaXMuY3VycmVudE5vZGU7XG4gICAgYXNzZXJ0KG5vZGUgJiYgbm9kZS50eXBlID09PSAnRW5kVGFnJywgJ2V4cGVjdGVkIGVuZCB0YWcnKTtcbiAgICByZXR1cm4gbm9kZSBhcyBUYWc8J0VuZFRhZyc+O1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRDb21tZW50KCk6IEFTVC5Db21tZW50U3RhdGVtZW50IHtcbiAgICBsZXQgbm9kZSA9IHRoaXMuY3VycmVudE5vZGU7XG4gICAgYXNzZXJ0KG5vZGUgJiYgbm9kZS50eXBlID09PSAnQ29tbWVudFN0YXRlbWVudCcsICdleHBlY3RlZCBhIGNvbW1lbnQnKTtcbiAgICByZXR1cm4gbm9kZSBhcyBBU1QuQ29tbWVudFN0YXRlbWVudDtcbiAgfVxuXG4gIGdldCBjdXJyZW50RGF0YSgpOiBBU1QuVGV4dE5vZGUge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiBub2RlLnR5cGUgPT09ICdUZXh0Tm9kZScsICdleHBlY3RlZCBhIHRleHQgbm9kZScpO1xuICAgIHJldHVybiBub2RlIGFzIEFTVC5UZXh0Tm9kZTtcbiAgfVxuXG4gIGFjY2VwdE5vZGUobm9kZTogSGFuZGxlYmFyc0FTVC5Qcm9ncmFtKTogUHJvZ3JhbTtcbiAgYWNjZXB0Tm9kZTxVIGV4dGVuZHMgQVNULk5vZGU+KG5vZGU6IEhhbmRsZWJhcnNBU1QuTm9kZSk6IFU7XG4gIGFjY2VwdE5vZGUobm9kZTogSGFuZGxlYmFyc0FTVC5Ob2RlKTogYW55IHtcbiAgICByZXR1cm4gdGhpc1tub2RlLnR5cGVdKG5vZGUpO1xuICB9XG5cbiAgY3VycmVudEVsZW1lbnQoKTogRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFN0YWNrW3RoaXMuZWxlbWVudFN0YWNrLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgc291cmNlRm9yTm9kZShub2RlOiBIYW5kbGViYXJzQVNULk5vZGUsIGVuZE5vZGU/OiB7IGxvYzogSGFuZGxlYmFyc0FTVC5Tb3VyY2VMb2NhdGlvbiB9KTogc3RyaW5nIHtcbiAgICBsZXQgZmlyc3RMaW5lID0gbm9kZS5sb2Muc3RhcnQubGluZSAtIDE7XG4gICAgbGV0IGN1cnJlbnRMaW5lID0gZmlyc3RMaW5lIC0gMTtcbiAgICBsZXQgZmlyc3RDb2x1bW4gPSBub2RlLmxvYy5zdGFydC5jb2x1bW47XG4gICAgbGV0IHN0cmluZyA9IFtdO1xuICAgIGxldCBsaW5lO1xuXG4gICAgbGV0IGxhc3RMaW5lOiBudW1iZXI7XG4gICAgbGV0IGxhc3RDb2x1bW46IG51bWJlcjtcblxuICAgIGlmIChlbmROb2RlKSB7XG4gICAgICBsYXN0TGluZSA9IGVuZE5vZGUubG9jLmVuZC5saW5lIC0gMTtcbiAgICAgIGxhc3RDb2x1bW4gPSBlbmROb2RlLmxvYy5lbmQuY29sdW1uO1xuICAgIH0gZWxzZSB7XG4gICAgICBsYXN0TGluZSA9IG5vZGUubG9jLmVuZC5saW5lIC0gMTtcbiAgICAgIGxhc3RDb2x1bW4gPSBub2RlLmxvYy5lbmQuY29sdW1uO1xuICAgIH1cblxuICAgIHdoaWxlIChjdXJyZW50TGluZSA8IGxhc3RMaW5lKSB7XG4gICAgICBjdXJyZW50TGluZSsrO1xuICAgICAgbGluZSA9IHRoaXMuc291cmNlW2N1cnJlbnRMaW5lXTtcblxuICAgICAgaWYgKGN1cnJlbnRMaW5lID09PSBmaXJzdExpbmUpIHtcbiAgICAgICAgaWYgKGZpcnN0TGluZSA9PT0gbGFzdExpbmUpIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChsaW5lLnNsaWNlKGZpcnN0Q29sdW1uLCBsYXN0Q29sdW1uKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2gobGluZS5zbGljZShmaXJzdENvbHVtbikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnRMaW5lID09PSBsYXN0TGluZSkge1xuICAgICAgICBzdHJpbmcucHVzaChsaW5lLnNsaWNlKDAsIGxhc3RDb2x1bW4pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmluZy5wdXNoKGxpbmUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHJpbmcuam9pbignXFxuJyk7XG4gIH1cbn1cbiJdfQ==