'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseElementBlockParams = parseElementBlockParams;
exports.childrenFor = childrenFor;
exports.appendChild = appendChild;
exports.isLiteral = isLiteral;
exports.printLiteral = printLiteral;

var _syntaxError = require('./errors/syntax-error');

var _syntaxError2 = _interopRequireDefault(_syntaxError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Regex to validate the identifier for block parameters.
// Based on the ID validation regex in Handlebars.
let ID_INVERSE_PATTERN = /[!"#%-,\.\/;->@\[-\^`\{-~]/;
// Checks the element's attributes to see if it uses block params.
// If it does, registers the block params with the program and
// removes the corresponding attributes from the element.
function parseElementBlockParams(element) {
    let params = parseBlockParams(element);
    if (params) element.blockParams = params;
}
function parseBlockParams(element) {
    let l = element.attributes.length;
    let attrNames = [];
    for (let i = 0; i < l; i++) {
        attrNames.push(element.attributes[i].name);
    }
    let asIndex = attrNames.indexOf('as');
    if (asIndex !== -1 && l > asIndex && attrNames[asIndex + 1].charAt(0) === '|') {
        // Some basic validation, since we're doing the parsing ourselves
        let paramsString = attrNames.slice(asIndex).join(' ');
        if (paramsString.charAt(paramsString.length - 1) !== '|' || paramsString.match(/\|/g).length !== 2) {
            throw new _syntaxError2.default("Invalid block parameters syntax: '" + paramsString + "'", element.loc);
        }
        let params = [];
        for (let i = asIndex + 1; i < l; i++) {
            let param = attrNames[i].replace(/\|/g, '');
            if (param !== '') {
                if (ID_INVERSE_PATTERN.test(param)) {
                    throw new _syntaxError2.default("Invalid identifier for block parameters: '" + param + "' in '" + paramsString + "'", element.loc);
                }
                params.push(param);
            }
        }
        if (params.length === 0) {
            throw new _syntaxError2.default("Cannot use zero block parameters: '" + paramsString + "'", element.loc);
        }
        element.attributes = element.attributes.slice(0, asIndex);
        return params;
    }
    return null;
}
function childrenFor(node) {
    switch (node.type) {
        case 'Program':
            return node.body;
        case 'ElementNode':
            return node.children;
    }
}
function appendChild(parent, node) {
    childrenFor(parent).push(node);
}
function isLiteral(path) {
    return path.type === 'StringLiteral' || path.type === 'BooleanLiteral' || path.type === 'NumberLiteral' || path.type === 'NullLiteral' || path.type === 'UndefinedLiteral';
}
function printLiteral(literal) {
    if (literal.type === 'UndefinedLiteral') {
        return 'undefined';
    } else {
        return JSON.stringify(literal.value);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9zeW50YXgvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRUEsQUFBTyxBQUFXLEFBQU0sQUFBdUIsQUFBQzs7Ozs7O0FBRWhELEFBQXlEO0FBQ3pELEFBQWtEO0FBRWxELElBQUksQUFBa0IscUJBQUcsQUFBNEIsQUFBQztBQUV0RCxBQUFrRTtBQUNsRSxBQUE4RDtBQUM5RCxBQUF5RCxBQUV6RCxBQUFNO2lDQUFrQyxBQUF3QixTQUM5RDtRQUFJLEFBQU0sU0FBRyxBQUFnQixpQkFBQyxBQUFPLEFBQUMsQUFBQyxBQUN2QztRQUFJLEFBQU0sUUFBRSxBQUFPLFFBQUMsQUFBVyxjQUFHLEFBQU0sQUFBQyxBQUMzQyxBQUFDOztBQUVELDBCQUEwQixBQUF3QixTQUNoRDtRQUFJLEFBQUMsSUFBRyxBQUFPLFFBQUMsQUFBVSxXQUFDLEFBQU0sQUFBQyxBQUNsQztRQUFJLEFBQVMsWUFBRyxBQUFFLEFBQUMsQUFFbkI7U0FBSyxJQUFJLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQUMsR0FBRSxBQUFDLEFBQUUsS0FBRSxBQUMxQixBQUFTO2tCQUFDLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBVSxXQUFDLEFBQUMsQUFBQyxHQUFDLEFBQUksQUFBQyxBQUFDLEFBQzVDO0FBRUQ7UUFBSSxBQUFPLFVBQUcsQUFBUyxVQUFDLEFBQU8sUUFBQyxBQUFJLEFBQUMsQUFBQyxBQUV0QztRQUFJLEFBQU8sWUFBSyxDQUFDLEFBQUMsS0FBSSxBQUFDLElBQUcsQUFBTyxXQUFJLEFBQVMsVUFBQyxBQUFPLFVBQUcsQUFBQyxBQUFDLEdBQUMsQUFBTSxPQUFDLEFBQUMsQUFBQyxPQUFLLEFBQUcsS0FBRSxBQUM3RSxBQUFpRTtBQUNqRTtZQUFJLEFBQVksZUFBRyxBQUFTLFVBQUMsQUFBSyxNQUFDLEFBQU8sQUFBQyxTQUFDLEFBQUksS0FBQyxBQUFHLEFBQUMsQUFBQyxBQUN0RDtZQUNFLEFBQVksYUFBQyxBQUFNLE9BQUMsQUFBWSxhQUFDLEFBQU0sU0FBRyxBQUFDLEFBQUMsT0FBSyxBQUFHLE9BQ3BELEFBQVksYUFBQyxBQUFLLE1BQUMsQUFBSyxBQUFFLE9BQUMsQUFBTSxXQUFLLEFBQUMsR0FDdkMsQUFDQTtrQkFBTSxBQUFJLEFBQVcsMEJBQUMsQUFBb0MsdUNBQUcsQUFBWSxlQUFHLEFBQUcsS0FBRSxBQUFPLFFBQUMsQUFBRyxBQUFDLEFBQUMsQUFDL0Y7QUFFRDtZQUFJLEFBQU0sU0FBRyxBQUFFLEFBQUMsQUFDaEI7YUFBSyxJQUFJLEFBQUMsSUFBRyxBQUFPLFVBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxBQUFFLEtBQUUsQUFDcEM7Z0JBQUksQUFBSyxRQUFHLEFBQVMsVUFBQyxBQUFDLEFBQUMsR0FBQyxBQUFPLFFBQUMsQUFBSyxPQUFFLEFBQUUsQUFBQyxBQUFDLEFBQzVDO2dCQUFJLEFBQUssVUFBSyxBQUFFLElBQUUsQUFDaEI7b0JBQUksQUFBa0IsbUJBQUMsQUFBSSxLQUFDLEFBQUssQUFBQyxRQUFFLEFBQ2xDOzBCQUFNLEFBQUksQUFBVywwQkFDbkIsQUFBNEMsK0NBQUcsQUFBSyxRQUFHLEFBQVEsV0FBRyxBQUFZLGVBQUcsQUFBRyxLQUNwRixBQUFPLFFBQUMsQUFBRyxBQUNaLEFBQUMsQUFDSDtBQUNELEFBQU07dUJBQUMsQUFBSSxLQUFDLEFBQUssQUFBQyxBQUFDLEFBQ3BCO0FBQ0Y7QUFFRDtZQUFJLEFBQU0sT0FBQyxBQUFNLFdBQUssQUFBQyxHQUFFLEFBQ3ZCO2tCQUFNLEFBQUksQUFBVywwQkFDbkIsQUFBcUMsd0NBQUcsQUFBWSxlQUFHLEFBQUcsS0FDMUQsQUFBTyxRQUFDLEFBQUcsQUFDWixBQUFDLEFBQ0g7QUFFRCxBQUFPO2dCQUFDLEFBQVUsYUFBRyxBQUFPLFFBQUMsQUFBVSxXQUFDLEFBQUssTUFBQyxBQUFDLEdBQUUsQUFBTyxBQUFDLEFBQUMsQUFDMUQ7ZUFBTyxBQUFNLEFBQUMsQUFDZjtBQUVEO1dBQU8sQUFBSSxBQUFDLEFBQ2QsQUFBQztBQUVELEFBQU07cUJBQXNCLEFBQW1DLE1BQzdEO1lBQVEsQUFBSSxLQUFDLEFBQUksQUFBRSxBQUNqQjthQUFLLEFBQVMsQUFDWjttQkFBTyxBQUFJLEtBQUMsQUFBSSxBQUFDLEFBQ25CO2FBQUssQUFBYSxBQUNoQjttQkFBTyxBQUFJLEtBQUMsQUFBUSxBQUFDLEFBQ3hCLEFBQ0gsQUFBQzs7QUFFRCxBQUFNO3FCQUFzQixBQUFxQyxRQUFFLEFBQW1CLE1BQ3BGLEFBQVc7Z0JBQUMsQUFBTSxBQUFDLFFBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ2pDLEFBQUM7QUFFRCxBQUFNO21CQUFvQixBQUFzQyxNQUM5RCxBQUFPO1dBQ0wsQUFBSSxLQUFDLEFBQUksU0FBSyxBQUFlLG1CQUM3QixBQUFJLEtBQUMsQUFBSSxTQUFLLEFBQWdCLG9CQUM5QixBQUFJLEtBQUMsQUFBSSxTQUFLLEFBQWUsbUJBQzdCLEFBQUksS0FBQyxBQUFJLFNBQUssQUFBYSxpQkFDM0IsQUFBSSxLQUFDLEFBQUksU0FBSyxBQUFrQixBQUNqQyxBQUFDLEFBQ0osQUFBQztBQUVELEFBQU07c0JBQXVCLEFBQW9CLFNBQy9DO1FBQUksQUFBTyxRQUFDLEFBQUksU0FBSyxBQUFrQixvQkFBRSxBQUN2QztlQUFPLEFBQVcsQUFBQyxBQUNwQjtXQUFNLEFBQ0w7ZUFBTyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQU8sUUFBQyxBQUFLLEFBQUMsQUFBQyxBQUN0QyxBQUNIO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBU1QgZnJvbSAnLi90eXBlcy9ub2Rlcyc7XG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCBTeW50YXhFcnJvciBmcm9tICcuL2Vycm9ycy9zeW50YXgtZXJyb3InO1xuXG4vLyBSZWdleCB0byB2YWxpZGF0ZSB0aGUgaWRlbnRpZmllciBmb3IgYmxvY2sgcGFyYW1ldGVycy5cbi8vIEJhc2VkIG9uIHRoZSBJRCB2YWxpZGF0aW9uIHJlZ2V4IGluIEhhbmRsZWJhcnMuXG5cbmxldCBJRF9JTlZFUlNFX1BBVFRFUk4gPSAvWyFcIiMlLSxcXC5cXC87LT5AXFxbLVxcXmBcXHstfl0vO1xuXG4vLyBDaGVja3MgdGhlIGVsZW1lbnQncyBhdHRyaWJ1dGVzIHRvIHNlZSBpZiBpdCB1c2VzIGJsb2NrIHBhcmFtcy5cbi8vIElmIGl0IGRvZXMsIHJlZ2lzdGVycyB0aGUgYmxvY2sgcGFyYW1zIHdpdGggdGhlIHByb2dyYW0gYW5kXG4vLyByZW1vdmVzIHRoZSBjb3JyZXNwb25kaW5nIGF0dHJpYnV0ZXMgZnJvbSB0aGUgZWxlbWVudC5cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRWxlbWVudEJsb2NrUGFyYW1zKGVsZW1lbnQ6IEFTVC5FbGVtZW50Tm9kZSkge1xuICBsZXQgcGFyYW1zID0gcGFyc2VCbG9ja1BhcmFtcyhlbGVtZW50KTtcbiAgaWYgKHBhcmFtcykgZWxlbWVudC5ibG9ja1BhcmFtcyA9IHBhcmFtcztcbn1cblxuZnVuY3Rpb24gcGFyc2VCbG9ja1BhcmFtcyhlbGVtZW50OiBBU1QuRWxlbWVudE5vZGUpOiBPcHRpb248c3RyaW5nW10+IHtcbiAgbGV0IGwgPSBlbGVtZW50LmF0dHJpYnV0ZXMubGVuZ3RoO1xuICBsZXQgYXR0ck5hbWVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBhdHRyTmFtZXMucHVzaChlbGVtZW50LmF0dHJpYnV0ZXNbaV0ubmFtZSk7XG4gIH1cblxuICBsZXQgYXNJbmRleCA9IGF0dHJOYW1lcy5pbmRleE9mKCdhcycpO1xuXG4gIGlmIChhc0luZGV4ICE9PSAtMSAmJiBsID4gYXNJbmRleCAmJiBhdHRyTmFtZXNbYXNJbmRleCArIDFdLmNoYXJBdCgwKSA9PT0gJ3wnKSB7XG4gICAgLy8gU29tZSBiYXNpYyB2YWxpZGF0aW9uLCBzaW5jZSB3ZSdyZSBkb2luZyB0aGUgcGFyc2luZyBvdXJzZWx2ZXNcbiAgICBsZXQgcGFyYW1zU3RyaW5nID0gYXR0ck5hbWVzLnNsaWNlKGFzSW5kZXgpLmpvaW4oJyAnKTtcbiAgICBpZiAoXG4gICAgICBwYXJhbXNTdHJpbmcuY2hhckF0KHBhcmFtc1N0cmluZy5sZW5ndGggLSAxKSAhPT0gJ3wnIHx8XG4gICAgICBwYXJhbXNTdHJpbmcubWF0Y2goL1xcfC9nKSEubGVuZ3RoICE9PSAyXG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJJbnZhbGlkIGJsb2NrIHBhcmFtZXRlcnMgc3ludGF4OiAnXCIgKyBwYXJhbXNTdHJpbmcgKyBcIidcIiwgZWxlbWVudC5sb2MpO1xuICAgIH1cblxuICAgIGxldCBwYXJhbXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gYXNJbmRleCArIDE7IGkgPCBsOyBpKyspIHtcbiAgICAgIGxldCBwYXJhbSA9IGF0dHJOYW1lc1tpXS5yZXBsYWNlKC9cXHwvZywgJycpO1xuICAgICAgaWYgKHBhcmFtICE9PSAnJykge1xuICAgICAgICBpZiAoSURfSU5WRVJTRV9QQVRURVJOLnRlc3QocGFyYW0pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFxuICAgICAgICAgICAgXCJJbnZhbGlkIGlkZW50aWZpZXIgZm9yIGJsb2NrIHBhcmFtZXRlcnM6ICdcIiArIHBhcmFtICsgXCInIGluICdcIiArIHBhcmFtc1N0cmluZyArIFwiJ1wiLFxuICAgICAgICAgICAgZWxlbWVudC5sb2NcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFxuICAgICAgICBcIkNhbm5vdCB1c2UgemVybyBibG9jayBwYXJhbWV0ZXJzOiAnXCIgKyBwYXJhbXNTdHJpbmcgKyBcIidcIixcbiAgICAgICAgZWxlbWVudC5sb2NcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZWxlbWVudC5hdHRyaWJ1dGVzID0gZWxlbWVudC5hdHRyaWJ1dGVzLnNsaWNlKDAsIGFzSW5kZXgpO1xuICAgIHJldHVybiBwYXJhbXM7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoaWxkcmVuRm9yKG5vZGU6IEFTVC5Qcm9ncmFtIHwgQVNULkVsZW1lbnROb2RlKTogQVNULlN0YXRlbWVudFtdIHtcbiAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICBjYXNlICdQcm9ncmFtJzpcbiAgICAgIHJldHVybiBub2RlLmJvZHk7XG4gICAgY2FzZSAnRWxlbWVudE5vZGUnOlxuICAgICAgcmV0dXJuIG5vZGUuY2hpbGRyZW47XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZENoaWxkKHBhcmVudDogQVNULlByb2dyYW0gfCBBU1QuRWxlbWVudE5vZGUsIG5vZGU6IEFTVC5TdGF0ZW1lbnQpIHtcbiAgY2hpbGRyZW5Gb3IocGFyZW50KS5wdXNoKG5vZGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMaXRlcmFsKHBhdGg6IEFTVC5QYXRoRXhwcmVzc2lvbiB8IEFTVC5MaXRlcmFsKTogcGF0aCBpcyBBU1QuTGl0ZXJhbCB7XG4gIHJldHVybiAoXG4gICAgcGF0aC50eXBlID09PSAnU3RyaW5nTGl0ZXJhbCcgfHxcbiAgICBwYXRoLnR5cGUgPT09ICdCb29sZWFuTGl0ZXJhbCcgfHxcbiAgICBwYXRoLnR5cGUgPT09ICdOdW1iZXJMaXRlcmFsJyB8fFxuICAgIHBhdGgudHlwZSA9PT0gJ051bGxMaXRlcmFsJyB8fFxuICAgIHBhdGgudHlwZSA9PT0gJ1VuZGVmaW5lZExpdGVyYWwnXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludExpdGVyYWwobGl0ZXJhbDogQVNULkxpdGVyYWwpOiBzdHJpbmcge1xuICBpZiAobGl0ZXJhbC50eXBlID09PSAnVW5kZWZpbmVkTGl0ZXJhbCcpIHtcbiAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGxpdGVyYWwudmFsdWUpO1xuICB9XG59XG4iXX0=