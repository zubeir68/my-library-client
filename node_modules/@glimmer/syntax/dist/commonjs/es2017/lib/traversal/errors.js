'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.cannotRemoveNode = cannotRemoveNode;
exports.cannotReplaceNode = cannotReplaceNode;
exports.cannotReplaceOrRemoveInKeyHandlerYet = cannotReplaceOrRemoveInKeyHandlerYet;
const TraversalError = function () {
    TraversalError.prototype = Object.create(Error.prototype);
    TraversalError.prototype.constructor = TraversalError;
    function TraversalError(message, node, parent, key) {
        let error = Error.call(this, message);
        this.key = key;
        this.message = message;
        this.node = node;
        this.parent = parent;
        this.stack = error.stack;
    }
    return TraversalError;
}();
exports.default = TraversalError;
function cannotRemoveNode(node, parent, key) {
    return new TraversalError('Cannot remove a node unless it is part of an array', node, parent, key);
}
function cannotReplaceNode(node, parent, key) {
    return new TraversalError('Cannot replace a node with multiple nodes unless it is part of an array', node, parent, key);
}
function cannotReplaceOrRemoveInKeyHandlerYet(node, key) {
    return new TraversalError('Replacing and removing in key handlers is not yet supported.', node, null, key);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvc3ludGF4L2xpYi90cmF2ZXJzYWwvZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBZUEsTUFBTSxBQUFjLDZCQUNsQixBQUFjO21CQUFDLEFBQVMsWUFBRyxBQUFNLE9BQUMsQUFBTSxPQUFDLEFBQUssTUFBQyxBQUFTLEFBQUMsQUFBQyxBQUMxRCxBQUFjO21CQUFDLEFBQVMsVUFBQyxBQUFXLGNBQUcsQUFBYyxBQUFDLEFBRXREOzRCQUVFLEFBQWUsU0FDZixBQUFjLE1BQ2QsQUFBd0IsUUFDeEIsQUFBVyxLQUVYO1lBQUksQUFBSyxRQUFHLEFBQUssTUFBQyxBQUFJLEtBQUMsQUFBSSxNQUFFLEFBQU8sQUFBQyxBQUFDLEFBRXRDLEFBQUk7YUFBQyxBQUFHLE1BQUcsQUFBRyxBQUFDLEFBQ2YsQUFBSTthQUFDLEFBQU8sVUFBRyxBQUFPLEFBQUMsQUFDdkIsQUFBSTthQUFDLEFBQUksT0FBRyxBQUFJLEFBQUMsQUFDakIsQUFBSTthQUFDLEFBQU0sU0FBRyxBQUFNLEFBQUMsQUFDckIsQUFBSTthQUFDLEFBQUssUUFBRyxBQUFLLE1BQUMsQUFBSyxBQUFDLEFBQzNCLEFBQUM7QUFFRDtXQUFPLEFBQXFCLEFBQUMsQUFDL0IsQUFBQyxBQUFDLEFBQUUsQUFBQztBQXJCNkMsQUF1QmxELENBdkJtRDtrQkF1QnBDLEFBQWMsQUFBQyxBQUU5QixBQUFNOzBCQUEyQixBQUFjLE1BQUUsQUFBZ0IsUUFBRSxBQUFXLEtBQzVFO1dBQU8sSUFBSSxBQUFjLGVBQ3ZCLEFBQW9ELHNEQUNwRCxBQUFJLE1BQ0osQUFBTSxRQUNOLEFBQUcsQUFDSixBQUFDLEFBQ0osQUFBQztBQUVELEFBQU07MkJBQTRCLEFBQWMsTUFBRSxBQUFnQixRQUFFLEFBQVcsS0FDN0U7V0FBTyxJQUFJLEFBQWMsZUFDdkIsQUFBeUUsMkVBQ3pFLEFBQUksTUFDSixBQUFNLFFBQ04sQUFBRyxBQUNKLEFBQUMsQUFDSixBQUFDO0FBRUQsQUFBTTs4Q0FBK0MsQUFBYyxNQUFFLEFBQVcsS0FDOUU7V0FBTyxJQUFJLEFBQWMsZUFDdkIsQUFBOEQsZ0VBQzlELEFBQUksTUFDSixBQUFJLE1BQ0osQUFBRyxBQUNKLEFBQUMsQUFDSixBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVNUIGZyb20gJy4uL3R5cGVzL25vZGVzJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRyYXZlcnNhbEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcjogVHJhdmVyc2FsRXJyb3JDb25zdHJ1Y3RvcjtcbiAga2V5OiBzdHJpbmc7XG4gIG5vZGU6IEFTVC5Ob2RlO1xuICBwYXJlbnQ6IE9wdGlvbjxBU1QuTm9kZT47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhdmVyc2FsRXJyb3JDb25zdHJ1Y3RvciB7XG4gIG5ldyAobWVzc2FnZTogc3RyaW5nLCBub2RlOiBBU1QuTm9kZSwgcGFyZW50OiBPcHRpb248QVNULk5vZGU+LCBrZXk6IHN0cmluZyk6IFRyYXZlcnNhbEVycm9yO1xuICByZWFkb25seSBwcm90b3R5cGU6IFRyYXZlcnNhbEVycm9yO1xufVxuXG5jb25zdCBUcmF2ZXJzYWxFcnJvcjogVHJhdmVyc2FsRXJyb3JDb25zdHJ1Y3RvciA9IChmdW5jdGlvbigpIHtcbiAgVHJhdmVyc2FsRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICBUcmF2ZXJzYWxFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUcmF2ZXJzYWxFcnJvcjtcblxuICBmdW5jdGlvbiBUcmF2ZXJzYWxFcnJvcihcbiAgICB0aGlzOiBUcmF2ZXJzYWxFcnJvcixcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgbm9kZTogQVNULk5vZGUsXG4gICAgcGFyZW50OiBPcHRpb248QVNULk5vZGU+LFxuICAgIGtleTogc3RyaW5nXG4gICkge1xuICAgIGxldCBlcnJvciA9IEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG5cbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMubm9kZSA9IG5vZGU7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrO1xuICB9XG5cbiAgcmV0dXJuIFRyYXZlcnNhbEVycm9yIGFzIGFueTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IFRyYXZlcnNhbEVycm9yO1xuXG5leHBvcnQgZnVuY3Rpb24gY2Fubm90UmVtb3ZlTm9kZShub2RlOiBBU1QuTm9kZSwgcGFyZW50OiBBU1QuTm9kZSwga2V5OiBzdHJpbmcpIHtcbiAgcmV0dXJuIG5ldyBUcmF2ZXJzYWxFcnJvcihcbiAgICAnQ2Fubm90IHJlbW92ZSBhIG5vZGUgdW5sZXNzIGl0IGlzIHBhcnQgb2YgYW4gYXJyYXknLFxuICAgIG5vZGUsXG4gICAgcGFyZW50LFxuICAgIGtleVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2Fubm90UmVwbGFjZU5vZGUobm9kZTogQVNULk5vZGUsIHBhcmVudDogQVNULk5vZGUsIGtleTogc3RyaW5nKSB7XG4gIHJldHVybiBuZXcgVHJhdmVyc2FsRXJyb3IoXG4gICAgJ0Nhbm5vdCByZXBsYWNlIGEgbm9kZSB3aXRoIG11bHRpcGxlIG5vZGVzIHVubGVzcyBpdCBpcyBwYXJ0IG9mIGFuIGFycmF5JyxcbiAgICBub2RlLFxuICAgIHBhcmVudCxcbiAgICBrZXlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbm5vdFJlcGxhY2VPclJlbW92ZUluS2V5SGFuZGxlcllldChub2RlOiBBU1QuTm9kZSwga2V5OiBzdHJpbmcpIHtcbiAgcmV0dXJuIG5ldyBUcmF2ZXJzYWxFcnJvcihcbiAgICAnUmVwbGFjaW5nIGFuZCByZW1vdmluZyBpbiBrZXkgaGFuZGxlcnMgaXMgbm90IHlldCBzdXBwb3J0ZWQuJyxcbiAgICBub2RlLFxuICAgIG51bGwsXG4gICAga2V5XG4gICk7XG59XG4iXX0=