'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseElementBlockParams = parseElementBlockParams;
exports.childrenFor = childrenFor;
exports.appendChild = appendChild;
exports.isLiteral = isLiteral;
exports.printLiteral = printLiteral;

var _syntaxError = require('./errors/syntax-error');

var _syntaxError2 = _interopRequireDefault(_syntaxError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Regex to validate the identifier for block parameters.
// Based on the ID validation regex in Handlebars.
var ID_INVERSE_PATTERN = /[!"#%-,\.\/;->@\[-\^`\{-~]/;
// Checks the element's attributes to see if it uses block params.
// If it does, registers the block params with the program and
// removes the corresponding attributes from the element.
function parseElementBlockParams(element) {
    var params = parseBlockParams(element);
    if (params) element.blockParams = params;
}
function parseBlockParams(element) {
    var l = element.attributes.length;
    var attrNames = [];
    for (var i = 0; i < l; i++) {
        attrNames.push(element.attributes[i].name);
    }
    var asIndex = attrNames.indexOf('as');
    if (asIndex !== -1 && l > asIndex && attrNames[asIndex + 1].charAt(0) === '|') {
        // Some basic validation, since we're doing the parsing ourselves
        var paramsString = attrNames.slice(asIndex).join(' ');
        if (paramsString.charAt(paramsString.length - 1) !== '|' || paramsString.match(/\|/g).length !== 2) {
            throw new _syntaxError2.default("Invalid block parameters syntax: '" + paramsString + "'", element.loc);
        }
        var params = [];
        for (var _i = asIndex + 1; _i < l; _i++) {
            var param = attrNames[_i].replace(/\|/g, '');
            if (param !== '') {
                if (ID_INVERSE_PATTERN.test(param)) {
                    throw new _syntaxError2.default("Invalid identifier for block parameters: '" + param + "' in '" + paramsString + "'", element.loc);
                }
                params.push(param);
            }
        }
        if (params.length === 0) {
            throw new _syntaxError2.default("Cannot use zero block parameters: '" + paramsString + "'", element.loc);
        }
        element.attributes = element.attributes.slice(0, asIndex);
        return params;
    }
    return null;
}
function childrenFor(node) {
    switch (node.type) {
        case 'Program':
            return node.body;
        case 'ElementNode':
            return node.children;
    }
}
function appendChild(parent, node) {
    childrenFor(parent).push(node);
}
function isLiteral(path) {
    return path.type === 'StringLiteral' || path.type === 'BooleanLiteral' || path.type === 'NumberLiteral' || path.type === 'NullLiteral' || path.type === 'UndefinedLiteral';
}
function printLiteral(literal) {
    if (literal.type === 'UndefinedLiteral') {
        return 'undefined';
    } else {
        return JSON.stringify(literal.value);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9zeW50YXgvbGliL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBRUEsQUFBTyxBQUFXLEFBQU0sQUFBdUIsQUFBQzs7Ozs7O0FBRWhELEFBQXlEO0FBQ3pELEFBQWtEO0FBRWxELElBQUksQUFBa0IscUJBQUcsQUFBNEIsQUFBQztBQUV0RCxBQUFrRTtBQUNsRSxBQUE4RDtBQUM5RCxBQUF5RCxBQUV6RCxBQUFNO2lDQUFrQyxBQUF3QixTQUM5RDtRQUFJLEFBQU0sU0FBRyxBQUFnQixpQkFBQyxBQUFPLEFBQUMsQUFBQyxBQUN2QztRQUFJLEFBQU0sUUFBRSxBQUFPLFFBQUMsQUFBVyxjQUFHLEFBQU0sQUFBQyxBQUMzQyxBQUFDOztBQUVELDBCQUEwQixBQUF3QixTQUNoRDtRQUFJLEFBQUMsSUFBRyxBQUFPLFFBQUMsQUFBVSxXQUFDLEFBQU0sQUFBQyxBQUNsQztRQUFJLEFBQVMsWUFBRyxBQUFFLEFBQUMsQUFFbkI7U0FBSyxJQUFJLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQUMsR0FBRSxBQUFDLEFBQUUsS0FBRSxBQUMxQixBQUFTO2tCQUFDLEFBQUksS0FBQyxBQUFPLFFBQUMsQUFBVSxXQUFDLEFBQUMsQUFBQyxHQUFDLEFBQUksQUFBQyxBQUFDLEFBQzVDLEFBRUQ7O1FBQUksQUFBTyxVQUFHLEFBQVMsVUFBQyxBQUFPLFFBQUMsQUFBSSxBQUFDLEFBQUMsQUFFdEM7UUFBSSxBQUFPLFlBQUssQ0FBQyxBQUFDLEtBQUksQUFBQyxJQUFHLEFBQU8sV0FBSSxBQUFTLFVBQUMsQUFBTyxVQUFHLEFBQUMsQUFBQyxHQUFDLEFBQU0sT0FBQyxBQUFDLEFBQUMsT0FBSyxBQUFHLEtBQUUsQUFDN0UsQUFBaUUsQUFDakU7O1lBQUksQUFBWSxlQUFHLEFBQVMsVUFBQyxBQUFLLE1BQUMsQUFBTyxBQUFDLFNBQUMsQUFBSSxLQUFDLEFBQUcsQUFBQyxBQUFDLEFBQ3REO1lBQ0UsQUFBWSxhQUFDLEFBQU0sT0FBQyxBQUFZLGFBQUMsQUFBTSxTQUFHLEFBQUMsQUFBQyxPQUFLLEFBQUcsT0FDcEQsQUFBWSxhQUFDLEFBQUssTUFBQyxBQUFLLEFBQUUsT0FBQyxBQUFNLFdBQUssQUFBQyxHQUN2QyxBQUNBO2tCQUFNLEFBQUksQUFBVywwQkFBQyxBQUFvQyx1Q0FBRyxBQUFZLGVBQUcsQUFBRyxLQUFFLEFBQU8sUUFBQyxBQUFHLEFBQUMsQUFBQyxBQUMvRixBQUVEOztZQUFJLEFBQU0sU0FBRyxBQUFFLEFBQUMsQUFDaEI7YUFBSyxJQUFJLEFBQUMsS0FBRyxBQUFPLFVBQUcsQUFBQyxHQUFFLEFBQUMsS0FBRyxBQUFDLEdBQUUsQUFBQyxBQUFFLE1BQUUsQUFDcEM7Z0JBQUksQUFBSyxRQUFHLEFBQVMsVUFBQyxBQUFDLEFBQUMsSUFBQyxBQUFPLFFBQUMsQUFBSyxPQUFFLEFBQUUsQUFBQyxBQUFDLEFBQzVDO2dCQUFJLEFBQUssVUFBSyxBQUFFLElBQUUsQUFDaEI7b0JBQUksQUFBa0IsbUJBQUMsQUFBSSxLQUFDLEFBQUssQUFBQyxRQUFFLEFBQ2xDOzBCQUFNLEFBQUksQUFBVywwQkFDbkIsQUFBNEMsK0NBQUcsQUFBSyxRQUFHLEFBQVEsV0FBRyxBQUFZLGVBQUcsQUFBRyxLQUNwRixBQUFPLFFBQUMsQUFBRyxBQUNaLEFBQUMsQUFDSCxBQUNELEFBQU07O3VCQUFDLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFBQyxBQUNwQixBQUNGO0FBRUQ7O1lBQUksQUFBTSxPQUFDLEFBQU0sV0FBSyxBQUFDLEdBQUUsQUFDdkI7a0JBQU0sQUFBSSxBQUFXLDBCQUNuQixBQUFxQyx3Q0FBRyxBQUFZLGVBQUcsQUFBRyxLQUMxRCxBQUFPLFFBQUMsQUFBRyxBQUNaLEFBQUMsQUFDSCxBQUVELEFBQU87O2dCQUFDLEFBQVUsYUFBRyxBQUFPLFFBQUMsQUFBVSxXQUFDLEFBQUssTUFBQyxBQUFDLEdBQUUsQUFBTyxBQUFDLEFBQUMsQUFDMUQ7ZUFBTyxBQUFNLEFBQUMsQUFDZixBQUVEOztXQUFPLEFBQUksQUFBQyxBQUNkLEFBQUM7QUFFRCxBQUFNO3FCQUFzQixBQUFtQyxNQUM3RDtZQUFRLEFBQUksS0FBQyxBQUFJLEFBQUUsQUFDakI7YUFBSyxBQUFTLEFBQ1o7bUJBQU8sQUFBSSxLQUFDLEFBQUksQUFBQyxBQUNuQjthQUFLLEFBQWEsQUFDaEI7bUJBQU8sQUFBSSxLQUFDLEFBQVEsQUFBQyxBQUN4QixBQUNILEFBQUM7O0FBRUQsQUFBTTtxQkFBc0IsQUFBcUMsUUFBRSxBQUFtQixNQUNwRixBQUFXO2dCQUFDLEFBQU0sQUFBQyxRQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQyxBQUNqQyxBQUFDO0FBRUQsQUFBTTttQkFBb0IsQUFBc0MsTUFDOUQsQUFBTztXQUNMLEFBQUksS0FBQyxBQUFJLFNBQUssQUFBZSxtQkFDN0IsQUFBSSxLQUFDLEFBQUksU0FBSyxBQUFnQixvQkFDOUIsQUFBSSxLQUFDLEFBQUksU0FBSyxBQUFlLG1CQUM3QixBQUFJLEtBQUMsQUFBSSxTQUFLLEFBQWEsaUJBQzNCLEFBQUksS0FBQyxBQUFJLFNBQUssQUFBa0IsQUFDakMsQUFBQyxBQUNKLEFBQUM7QUFFRCxBQUFNO3NCQUF1QixBQUFvQixTQUMvQztRQUFJLEFBQU8sUUFBQyxBQUFJLFNBQUssQUFBa0Isb0JBQUUsQUFDdkM7ZUFBTyxBQUFXLEFBQUMsQUFDcEI7V0FBTSxBQUNMO2VBQU8sQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFPLFFBQUMsQUFBSyxBQUFDLEFBQUMsQUFDdEMsQUFDSCxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVNUIGZyb20gJy4vdHlwZXMvbm9kZXMnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgU3ludGF4RXJyb3IgZnJvbSAnLi9lcnJvcnMvc3ludGF4LWVycm9yJztcblxuLy8gUmVnZXggdG8gdmFsaWRhdGUgdGhlIGlkZW50aWZpZXIgZm9yIGJsb2NrIHBhcmFtZXRlcnMuXG4vLyBCYXNlZCBvbiB0aGUgSUQgdmFsaWRhdGlvbiByZWdleCBpbiBIYW5kbGViYXJzLlxuXG5sZXQgSURfSU5WRVJTRV9QQVRURVJOID0gL1shXCIjJS0sXFwuXFwvOy0+QFxcWy1cXF5gXFx7LX5dLztcblxuLy8gQ2hlY2tzIHRoZSBlbGVtZW50J3MgYXR0cmlidXRlcyB0byBzZWUgaWYgaXQgdXNlcyBibG9jayBwYXJhbXMuXG4vLyBJZiBpdCBkb2VzLCByZWdpc3RlcnMgdGhlIGJsb2NrIHBhcmFtcyB3aXRoIHRoZSBwcm9ncmFtIGFuZFxuLy8gcmVtb3ZlcyB0aGUgY29ycmVzcG9uZGluZyBhdHRyaWJ1dGVzIGZyb20gdGhlIGVsZW1lbnQuXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUVsZW1lbnRCbG9ja1BhcmFtcyhlbGVtZW50OiBBU1QuRWxlbWVudE5vZGUpIHtcbiAgbGV0IHBhcmFtcyA9IHBhcnNlQmxvY2tQYXJhbXMoZWxlbWVudCk7XG4gIGlmIChwYXJhbXMpIGVsZW1lbnQuYmxvY2tQYXJhbXMgPSBwYXJhbXM7XG59XG5cbmZ1bmN0aW9uIHBhcnNlQmxvY2tQYXJhbXMoZWxlbWVudDogQVNULkVsZW1lbnROb2RlKTogT3B0aW9uPHN0cmluZ1tdPiB7XG4gIGxldCBsID0gZWxlbWVudC5hdHRyaWJ1dGVzLmxlbmd0aDtcbiAgbGV0IGF0dHJOYW1lcyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgYXR0ck5hbWVzLnB1c2goZWxlbWVudC5hdHRyaWJ1dGVzW2ldLm5hbWUpO1xuICB9XG5cbiAgbGV0IGFzSW5kZXggPSBhdHRyTmFtZXMuaW5kZXhPZignYXMnKTtcblxuICBpZiAoYXNJbmRleCAhPT0gLTEgJiYgbCA+IGFzSW5kZXggJiYgYXR0ck5hbWVzW2FzSW5kZXggKyAxXS5jaGFyQXQoMCkgPT09ICd8Jykge1xuICAgIC8vIFNvbWUgYmFzaWMgdmFsaWRhdGlvbiwgc2luY2Ugd2UncmUgZG9pbmcgdGhlIHBhcnNpbmcgb3Vyc2VsdmVzXG4gICAgbGV0IHBhcmFtc1N0cmluZyA9IGF0dHJOYW1lcy5zbGljZShhc0luZGV4KS5qb2luKCcgJyk7XG4gICAgaWYgKFxuICAgICAgcGFyYW1zU3RyaW5nLmNoYXJBdChwYXJhbXNTdHJpbmcubGVuZ3RoIC0gMSkgIT09ICd8JyB8fFxuICAgICAgcGFyYW1zU3RyaW5nLm1hdGNoKC9cXHwvZykhLmxlbmd0aCAhPT0gMlxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiSW52YWxpZCBibG9jayBwYXJhbWV0ZXJzIHN5bnRheDogJ1wiICsgcGFyYW1zU3RyaW5nICsgXCInXCIsIGVsZW1lbnQubG9jKTtcbiAgICB9XG5cbiAgICBsZXQgcGFyYW1zID0gW107XG4gICAgZm9yIChsZXQgaSA9IGFzSW5kZXggKyAxOyBpIDwgbDsgaSsrKSB7XG4gICAgICBsZXQgcGFyYW0gPSBhdHRyTmFtZXNbaV0ucmVwbGFjZSgvXFx8L2csICcnKTtcbiAgICAgIGlmIChwYXJhbSAhPT0gJycpIHtcbiAgICAgICAgaWYgKElEX0lOVkVSU0VfUEFUVEVSTi50ZXN0KHBhcmFtKSkge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcbiAgICAgICAgICAgIFwiSW52YWxpZCBpZGVudGlmaWVyIGZvciBibG9jayBwYXJhbWV0ZXJzOiAnXCIgKyBwYXJhbSArIFwiJyBpbiAnXCIgKyBwYXJhbXNTdHJpbmcgKyBcIidcIixcbiAgICAgICAgICAgIGVsZW1lbnQubG9jXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJhbXMucHVzaChwYXJhbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcbiAgICAgICAgXCJDYW5ub3QgdXNlIHplcm8gYmxvY2sgcGFyYW1ldGVyczogJ1wiICsgcGFyYW1zU3RyaW5nICsgXCInXCIsXG4gICAgICAgIGVsZW1lbnQubG9jXG4gICAgICApO1xuICAgIH1cblxuICAgIGVsZW1lbnQuYXR0cmlidXRlcyA9IGVsZW1lbnQuYXR0cmlidXRlcy5zbGljZSgwLCBhc0luZGV4KTtcbiAgICByZXR1cm4gcGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGlsZHJlbkZvcihub2RlOiBBU1QuUHJvZ3JhbSB8IEFTVC5FbGVtZW50Tm9kZSk6IEFTVC5TdGF0ZW1lbnRbXSB7XG4gIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgY2FzZSAnUHJvZ3JhbSc6XG4gICAgICByZXR1cm4gbm9kZS5ib2R5O1xuICAgIGNhc2UgJ0VsZW1lbnROb2RlJzpcbiAgICAgIHJldHVybiBub2RlLmNoaWxkcmVuO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRDaGlsZChwYXJlbnQ6IEFTVC5Qcm9ncmFtIHwgQVNULkVsZW1lbnROb2RlLCBub2RlOiBBU1QuU3RhdGVtZW50KSB7XG4gIGNoaWxkcmVuRm9yKHBhcmVudCkucHVzaChub2RlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGl0ZXJhbChwYXRoOiBBU1QuUGF0aEV4cHJlc3Npb24gfCBBU1QuTGl0ZXJhbCk6IHBhdGggaXMgQVNULkxpdGVyYWwge1xuICByZXR1cm4gKFxuICAgIHBhdGgudHlwZSA9PT0gJ1N0cmluZ0xpdGVyYWwnIHx8XG4gICAgcGF0aC50eXBlID09PSAnQm9vbGVhbkxpdGVyYWwnIHx8XG4gICAgcGF0aC50eXBlID09PSAnTnVtYmVyTGl0ZXJhbCcgfHxcbiAgICBwYXRoLnR5cGUgPT09ICdOdWxsTGl0ZXJhbCcgfHxcbiAgICBwYXRoLnR5cGUgPT09ICdVbmRlZmluZWRMaXRlcmFsJ1xuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRMaXRlcmFsKGxpdGVyYWw6IEFTVC5MaXRlcmFsKTogc3RyaW5nIHtcbiAgaWYgKGxpdGVyYWwudHlwZSA9PT0gJ1VuZGVmaW5lZExpdGVyYWwnKSB7XG4gICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShsaXRlcmFsLnZhbHVlKTtcbiAgfVxufVxuIl19