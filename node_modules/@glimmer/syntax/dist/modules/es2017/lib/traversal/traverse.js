import visitorKeys from '../types/visitor-keys';
import { cannotRemoveNode, cannotReplaceNode, cannotReplaceOrRemoveInKeyHandlerYet } from './errors';
function getEnterFunction(handler) {
    return typeof handler === 'function' ? handler : handler.enter;
}
function getExitFunction(handler) {
    return typeof handler !== 'function' ? handler.exit : undefined;
}
function getKeyHandler(handler, key) {
    let keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;
    if (keyVisitor === undefined) return;
    let keyHandler = keyVisitor[key];
    if (keyHandler !== undefined) {
        // widen specific key to all keys
        return keyHandler;
    }
    return keyVisitor.All;
}
function getNodeHandler(visitor, nodeType) {
    let handler = visitor[nodeType];
    if (handler !== undefined) {
        // widen specific Node to all nodes
        return handler;
    }
    return visitor.All;
}
function visitNode(visitor, node) {
    let handler = getNodeHandler(visitor, node.type);
    let enter;
    let exit;
    if (handler !== undefined) {
        enter = getEnterFunction(handler);
        exit = getExitFunction(handler);
    }
    let result;
    if (enter !== undefined) {
        result = enter(node);
    }
    if (result !== undefined && result !== null) {
        if (JSON.stringify(node) === JSON.stringify(result)) {
            result = undefined;
        } else if (Array.isArray(result)) {
            return visitArray(visitor, result) || result;
        } else {
            return visitNode(visitor, result) || result;
        }
    }
    if (result === undefined) {
        let keys = visitorKeys[node.type];
        for (let i = 0; i < keys.length; i++) {
            // we know if it has child keys we can widen to a ParentNode
            visitKey(visitor, handler, node, keys[i]);
        }
        if (exit !== undefined) {
            result = exit(node);
        }
    }
    return result;
}
function visitKey(visitor, handler, node, key) {
    let value = node[key];
    if (!value) {
        return;
    }
    let keyEnter;
    let keyExit;
    if (handler !== undefined) {
        let keyHandler = getKeyHandler(handler, key);
        if (keyHandler !== undefined) {
            keyEnter = getEnterFunction(keyHandler);
            keyExit = getExitFunction(keyHandler);
        }
    }
    if (keyEnter !== undefined) {
        if (keyEnter(node, key) !== undefined) {
            throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);
        }
    }
    if (Array.isArray(value)) {
        visitArray(visitor, value);
    } else {
        let result = visitNode(visitor, value);
        if (result !== undefined) {
            assignKey(node, key, result);
        }
    }
    if (keyExit !== undefined) {
        if (keyExit(node, key) !== undefined) {
            throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);
        }
    }
}
function visitArray(visitor, array) {
    for (let i = 0; i < array.length; i++) {
        let result = visitNode(visitor, array[i]);
        if (result !== undefined) {
            i += spliceArray(array, i, result) - 1;
        }
    }
}
function assignKey(node, key, result) {
    if (result === null) {
        throw cannotRemoveNode(node[key], node, key);
    } else if (Array.isArray(result)) {
        if (result.length === 1) {
            node[key] = result[0];
        } else {
            if (result.length === 0) {
                throw cannotRemoveNode(node[key], node, key);
            } else {
                throw cannotReplaceNode(node[key], node, key);
            }
        }
    } else {
        node[key] = result;
    }
}
function spliceArray(array, index, result) {
    if (result === null) {
        array.splice(index, 1);
        return 0;
    } else if (Array.isArray(result)) {
        array.splice(index, 1, ...result);
        return result.length;
    } else {
        array.splice(index, 1, result);
        return 1;
    }
}
export default function traverse(node, visitor) {
    visitNode(visitor, node);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhdmVyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9zeW50YXgvbGliL3RyYXZlcnNhbC90cmF2ZXJzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEFBQVcsaUJBQU0sQUFBdUIsQUFBQztBQUNoRCxBQUFPLFNBQ0wsQUFBZ0Isa0JBQ2hCLEFBQWlCLG1CQUNqQixBQUFvQyxBQUNyQyw0Q0FBTSxBQUFVLEFBQUM7QUFNbEIsMEJBQ0UsQUFBaUM7QUFFakMsV0FBTyxPQUFPLEFBQU8sWUFBSyxBQUFVLEFBQUMsQUFBQyxhQUFDLEFBQU8sQUFBQyxBQUFDLFVBQUMsQUFBTyxRQUFDLEFBQUssQUFBQyxBQUNqRTtBQUFDO0FBSUQseUJBQ0UsQUFBaUM7QUFFakMsV0FBTyxPQUFPLEFBQU8sWUFBSyxBQUFVLEFBQUMsQUFBQyxhQUFDLEFBQU8sUUFBQyxBQUFJLEFBQUMsQUFBQyxPQUFDLEFBQVMsQUFBQyxBQUNsRTtBQUFDO0FBRUQsdUJBQXVCLEFBQW9CLFNBQUUsQUFBYTtBQUN4RCxRQUFJLEFBQVUsYUFBRyxPQUFPLEFBQU8sWUFBSyxBQUFVLEFBQUMsQUFBQyxhQUFDLEFBQU8sUUFBQyxBQUFJLEFBQUMsQUFBQyxPQUFDLEFBQVMsQUFBQztBQUMxRSxRQUFJLEFBQVUsZUFBSyxBQUFTLFdBQUUsQUFBTztBQUNyQyxRQUFJLEFBQVUsYUFBRyxBQUFVLFdBQUMsQUFBRyxBQUFDLEFBQUM7QUFDakMsUUFBSSxBQUFVLGVBQUssQUFBUyxXQUFFO0FBQzVCLEFBQWlDO0FBQ2pDLGVBQU8sQUFBd0IsQUFBQztBQUNqQztBQUNELFdBQU8sQUFBVSxXQUFDLEFBQUcsQUFBQyxBQUN4QjtBQUFDO0FBRUQsd0JBQXdCLEFBQW9CLFNBQUUsQUFBa0I7QUFDOUQsUUFBSSxBQUFPLFVBQUcsQUFBTyxRQUFDLEFBQVEsQUFBQyxBQUFDO0FBQ2hDLFFBQUksQUFBTyxZQUFLLEFBQVMsV0FBRTtBQUN6QixBQUFtQztBQUNuQyxlQUFPLEFBQXNCLEFBQUM7QUFDL0I7QUFDRCxXQUFPLEFBQU8sUUFBQyxBQUFHLEFBQUMsQUFDckI7QUFBQztBQUVELG1CQUFtQixBQUFvQixTQUFFLEFBQVU7QUFDakQsUUFBSSxBQUFPLFVBQUcsQUFBYyxlQUFDLEFBQU8sU0FBRSxBQUFJLEtBQUMsQUFBSSxBQUFDLEFBQUM7QUFDakQsUUFBSSxBQUErQixBQUFDO0FBQ3BDLFFBQUksQUFBOEIsQUFBQztBQUVuQyxRQUFJLEFBQU8sWUFBSyxBQUFTLFdBQUU7QUFDekIsQUFBSyxnQkFBRyxBQUFnQixpQkFBQyxBQUFPLEFBQUMsQUFBQztBQUNsQyxBQUFJLGVBQUcsQUFBZSxnQkFBQyxBQUFPLEFBQUMsQUFBQztBQUNqQztBQUVELFFBQUksQUFBK0MsQUFBQztBQUNwRCxRQUFJLEFBQUssVUFBSyxBQUFTLFdBQUU7QUFDdkIsQUFBTSxpQkFBRyxBQUFLLE1BQUMsQUFBSSxBQUFDLEFBQUM7QUFDdEI7QUFFRCxRQUFJLEFBQU0sV0FBSyxBQUFTLGFBQUksQUFBTSxXQUFLLEFBQUksTUFBRTtBQUMzQyxZQUFJLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBSSxBQUFDLFVBQUssQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFNLEFBQUMsU0FBRTtBQUNuRCxBQUFNLHFCQUFHLEFBQVMsQUFBQztBQUNwQixtQkFBVSxBQUFLLE1BQUMsQUFBTyxRQUFDLEFBQU0sQUFBQyxTQUFFO0FBQ2hDLG1CQUFPLEFBQVUsV0FBQyxBQUFPLFNBQUUsQUFBTSxBQUFDLFdBQUksQUFBTSxBQUFDO0FBQzlDLFNBRk0sTUFFQTtBQUNMLG1CQUFPLEFBQVMsVUFBQyxBQUFPLFNBQUUsQUFBTSxBQUFDLFdBQUksQUFBTSxBQUFDO0FBQzdDO0FBQ0Y7QUFFRCxRQUFJLEFBQU0sV0FBSyxBQUFTLFdBQUU7QUFDeEIsWUFBSSxBQUFJLE9BQUcsQUFBVyxZQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQztBQUVsQyxhQUFLLElBQUksQUFBQyxJQUFHLEFBQUMsR0FBRSxBQUFDLElBQUcsQUFBSSxLQUFDLEFBQU0sUUFBRSxBQUFDLEFBQUUsS0FBRTtBQUNwQyxBQUE0RDtBQUM1RCxBQUFRLHFCQUFDLEFBQU8sU0FBRSxBQUFPLFNBQUUsQUFBa0IsTUFBRSxBQUFJLEtBQUMsQUFBQyxBQUFDLEFBQUMsQUFBQztBQUN6RDtBQUVELFlBQUksQUFBSSxTQUFLLEFBQVMsV0FBRTtBQUN0QixBQUFNLHFCQUFHLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQztBQUNyQjtBQUNGO0FBRUQsV0FBTyxBQUFNLEFBQUMsQUFDaEI7QUFBQztBQUVELGtCQUNFLEFBQW9CLFNBQ3BCLEFBQWdDLFNBQ2hDLEFBQWdCLE1BQ2hCLEFBQWE7QUFFYixRQUFJLEFBQUssUUFBRyxBQUFJLEtBQUMsQUFBRyxBQUFxQyxBQUFDO0FBQzFELFFBQUksQ0FBQyxBQUFLLE9BQUU7QUFDVixBQUFPO0FBQ1I7QUFFRCxRQUFJLEFBQWlDLEFBQUM7QUFDdEMsUUFBSSxBQUFnQyxBQUFDO0FBRXJDLFFBQUksQUFBTyxZQUFLLEFBQVMsV0FBRTtBQUN6QixZQUFJLEFBQVUsYUFBRyxBQUFhLGNBQUMsQUFBTyxTQUFFLEFBQUcsQUFBQyxBQUFDO0FBQzdDLFlBQUksQUFBVSxlQUFLLEFBQVMsV0FBRTtBQUM1QixBQUFRLHVCQUFHLEFBQWdCLGlCQUFDLEFBQVUsQUFBQyxBQUFDO0FBQ3hDLEFBQU8sc0JBQUcsQUFBZSxnQkFBQyxBQUFVLEFBQUMsQUFBQztBQUN2QztBQUNGO0FBRUQsUUFBSSxBQUFRLGFBQUssQUFBUyxXQUFFO0FBQzFCLFlBQUksQUFBUSxTQUFDLEFBQUksTUFBRSxBQUFHLEFBQUMsU0FBSyxBQUFTLFdBQUU7QUFDckMsa0JBQU0sQUFBb0MscUNBQUMsQUFBSSxNQUFFLEFBQUcsQUFBQyxBQUFDO0FBQ3ZEO0FBQ0Y7QUFFRCxRQUFJLEFBQUssTUFBQyxBQUFPLFFBQUMsQUFBSyxBQUFDLFFBQUU7QUFDeEIsQUFBVSxtQkFBQyxBQUFPLFNBQUUsQUFBSyxBQUFDLEFBQUM7QUFDNUIsV0FBTTtBQUNMLFlBQUksQUFBTSxTQUFHLEFBQVMsVUFBQyxBQUFPLFNBQUUsQUFBSyxBQUFDLEFBQUM7QUFDdkMsWUFBSSxBQUFNLFdBQUssQUFBUyxXQUFFO0FBQ3hCLEFBQVMsc0JBQUMsQUFBSSxNQUFFLEFBQUcsS0FBRSxBQUFNLEFBQUMsQUFBQztBQUM5QjtBQUNGO0FBRUQsUUFBSSxBQUFPLFlBQUssQUFBUyxXQUFFO0FBQ3pCLFlBQUksQUFBTyxRQUFDLEFBQUksTUFBRSxBQUFHLEFBQUMsU0FBSyxBQUFTLFdBQUU7QUFDcEMsa0JBQU0sQUFBb0MscUNBQUMsQUFBSSxNQUFFLEFBQUcsQUFBQyxBQUFDO0FBQ3ZEO0FBQ0YsQUFDSDtBQUFDO0FBRUQsb0JBQW9CLEFBQW9CLFNBQUUsQUFBYTtBQUNyRCxTQUFLLElBQUksQUFBQyxJQUFHLEFBQUMsR0FBRSxBQUFDLElBQUcsQUFBSyxNQUFDLEFBQU0sUUFBRSxBQUFDLEFBQUUsS0FBRTtBQUNyQyxZQUFJLEFBQU0sU0FBRyxBQUFTLFVBQUMsQUFBTyxTQUFFLEFBQUssTUFBQyxBQUFDLEFBQUMsQUFBQyxBQUFDO0FBQzFDLFlBQUksQUFBTSxXQUFLLEFBQVMsV0FBRTtBQUN4QixBQUFDLGlCQUFJLEFBQVcsWUFBQyxBQUFLLE9BQUUsQUFBQyxHQUFFLEFBQU0sQUFBQyxVQUFHLEFBQUMsQUFBQztBQUN4QztBQUNGLEFBQ0g7QUFBQztBQUVELG1CQUFtQixBQUFVLE1BQUUsQUFBYSxLQUFFLEFBQTRCO0FBQ3hFLFFBQUksQUFBTSxXQUFLLEFBQUksTUFBRTtBQUNuQixjQUFNLEFBQWdCLGlCQUFDLEFBQUksS0FBQyxBQUFHLEFBQUMsTUFBRSxBQUFJLE1BQUUsQUFBRyxBQUFDLEFBQUM7QUFDOUMsZUFBVSxBQUFLLE1BQUMsQUFBTyxRQUFDLEFBQU0sQUFBQyxTQUFFO0FBQ2hDLFlBQUksQUFBTSxPQUFDLEFBQU0sV0FBSyxBQUFDLEdBQUU7QUFDdkIsQUFBSSxpQkFBQyxBQUFHLEFBQUMsT0FBRyxBQUFNLE9BQUMsQUFBQyxBQUFDLEFBQUM7QUFDdkIsZUFBTTtBQUNMLGdCQUFJLEFBQU0sT0FBQyxBQUFNLFdBQUssQUFBQyxHQUFFO0FBQ3ZCLHNCQUFNLEFBQWdCLGlCQUFDLEFBQUksS0FBQyxBQUFHLEFBQUMsTUFBRSxBQUFJLE1BQUUsQUFBRyxBQUFDLEFBQUM7QUFDOUMsbUJBQU07QUFDTCxzQkFBTSxBQUFpQixrQkFBQyxBQUFJLEtBQUMsQUFBRyxBQUFDLE1BQUUsQUFBSSxNQUFFLEFBQUcsQUFBQyxBQUFDO0FBQy9DO0FBQ0Y7QUFDRixLQVZNLE1BVUE7QUFDTCxBQUFJLGFBQUMsQUFBRyxBQUFDLE9BQUcsQUFBTSxBQUFDO0FBQ3BCLEFBQ0g7QUFBQztBQUVELHFCQUFxQixBQUFhLE9BQUUsQUFBYSxPQUFFLEFBQTRCO0FBQzdFLFFBQUksQUFBTSxXQUFLLEFBQUksTUFBRTtBQUNuQixBQUFLLGNBQUMsQUFBTSxPQUFDLEFBQUssT0FBRSxBQUFDLEFBQUMsQUFBQztBQUN2QixlQUFPLEFBQUMsQUFBQztBQUNWLGVBQVUsQUFBSyxNQUFDLEFBQU8sUUFBQyxBQUFNLEFBQUMsU0FBRTtBQUNoQyxBQUFLLGNBQUMsQUFBTSxPQUFDLEFBQUssT0FBRSxBQUFDLEdBQUUsR0FBRyxBQUFNLEFBQUMsQUFBQztBQUNsQyxlQUFPLEFBQU0sT0FBQyxBQUFNLEFBQUM7QUFDdEIsS0FITSxNQUdBO0FBQ0wsQUFBSyxjQUFDLEFBQU0sT0FBQyxBQUFLLE9BQUUsQUFBQyxHQUFFLEFBQU0sQUFBQyxBQUFDO0FBQy9CLGVBQU8sQUFBQyxBQUFDO0FBQ1YsQUFDSDtBQUFDO0FBRUQsQUFBTSxBQUFDLEFBQU8saUNBQW1CLEFBQVUsTUFBRSxBQUFvQjtBQUMvRCxBQUFTLGNBQUMsQUFBTyxTQUFFLEFBQUksQUFBQyxBQUFDLEFBQzNCO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmlzaXRvcktleXMgZnJvbSAnLi4vdHlwZXMvdmlzaXRvci1rZXlzJztcbmltcG9ydCB7XG4gIGNhbm5vdFJlbW92ZU5vZGUsXG4gIGNhbm5vdFJlcGxhY2VOb2RlLFxuICBjYW5ub3RSZXBsYWNlT3JSZW1vdmVJbktleUhhbmRsZXJZZXQsXG59IGZyb20gJy4vZXJyb3JzJztcbmltcG9ydCB7IE5vZGUsIE5vZGVUeXBlLCBQYXJlbnROb2RlLCBDaGlsZEtleSB9IGZyb20gJy4uL3R5cGVzL25vZGVzJztcbmltcG9ydCB7IE5vZGVWaXNpdG9yLCBOb2RlRnVuY3Rpb24sIE5vZGVIYW5kbGVyLCBLZXlGdW5jdGlvbiwgS2V5SGFuZGxlciB9IGZyb20gJy4uL3R5cGVzL3Zpc2l0b3InO1xuXG5mdW5jdGlvbiBnZXRFbnRlckZ1bmN0aW9uKGhhbmRsZXI6IEtleUhhbmRsZXIpOiBLZXlGdW5jdGlvbiB8IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIGdldEVudGVyRnVuY3Rpb24oaGFuZGxlcjogTm9kZUhhbmRsZXIpOiBOb2RlRnVuY3Rpb24gfCB1bmRlZmluZWQ7XG5mdW5jdGlvbiBnZXRFbnRlckZ1bmN0aW9uKFxuICBoYW5kbGVyOiBOb2RlSGFuZGxlciB8IEtleUhhbmRsZXJcbik6IE5vZGVGdW5jdGlvbiB8IEtleUZ1bmN0aW9uIHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nID8gaGFuZGxlciA6IGhhbmRsZXIuZW50ZXI7XG59XG5cbmZ1bmN0aW9uIGdldEV4aXRGdW5jdGlvbihoYW5kbGVyOiBLZXlIYW5kbGVyKTogS2V5RnVuY3Rpb24gfCB1bmRlZmluZWQ7XG5mdW5jdGlvbiBnZXRFeGl0RnVuY3Rpb24oaGFuZGxlcjogTm9kZUhhbmRsZXIpOiBOb2RlRnVuY3Rpb24gfCB1bmRlZmluZWQ7XG5mdW5jdGlvbiBnZXRFeGl0RnVuY3Rpb24oXG4gIGhhbmRsZXI6IE5vZGVIYW5kbGVyIHwgS2V5SGFuZGxlclxuKTogTm9kZUZ1bmN0aW9uIHwgS2V5RnVuY3Rpb24gfCB1bmRlZmluZWQge1xuICByZXR1cm4gdHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicgPyBoYW5kbGVyLmV4aXQgOiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGdldEtleUhhbmRsZXIoaGFuZGxlcjogTm9kZUhhbmRsZXIsIGtleTogQ2hpbGRLZXkpOiBLZXlIYW5kbGVyIHwgdW5kZWZpbmVkIHtcbiAgbGV0IGtleVZpc2l0b3IgPSB0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJyA/IGhhbmRsZXIua2V5cyA6IHVuZGVmaW5lZDtcbiAgaWYgKGtleVZpc2l0b3IgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICBsZXQga2V5SGFuZGxlciA9IGtleVZpc2l0b3Jba2V5XTtcbiAgaWYgKGtleUhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIHdpZGVuIHNwZWNpZmljIGtleSB0byBhbGwga2V5c1xuICAgIHJldHVybiBrZXlIYW5kbGVyIGFzIEtleUhhbmRsZXI7XG4gIH1cbiAgcmV0dXJuIGtleVZpc2l0b3IuQWxsO1xufVxuXG5mdW5jdGlvbiBnZXROb2RlSGFuZGxlcih2aXNpdG9yOiBOb2RlVmlzaXRvciwgbm9kZVR5cGU6IE5vZGVUeXBlKTogTm9kZUhhbmRsZXIgfCB1bmRlZmluZWQge1xuICBsZXQgaGFuZGxlciA9IHZpc2l0b3Jbbm9kZVR5cGVdO1xuICBpZiAoaGFuZGxlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gd2lkZW4gc3BlY2lmaWMgTm9kZSB0byBhbGwgbm9kZXNcbiAgICByZXR1cm4gaGFuZGxlciBhcyBOb2RlSGFuZGxlcjtcbiAgfVxuICByZXR1cm4gdmlzaXRvci5BbGw7XG59XG5cbmZ1bmN0aW9uIHZpc2l0Tm9kZSh2aXNpdG9yOiBOb2RlVmlzaXRvciwgbm9kZTogTm9kZSk6IE5vZGUgfCBOb2RlW10gfCB1bmRlZmluZWQgfCBudWxsIHwgdm9pZCB7XG4gIGxldCBoYW5kbGVyID0gZ2V0Tm9kZUhhbmRsZXIodmlzaXRvciwgbm9kZS50eXBlKTtcbiAgbGV0IGVudGVyOiBOb2RlRnVuY3Rpb24gfCB1bmRlZmluZWQ7XG4gIGxldCBleGl0OiBOb2RlRnVuY3Rpb24gfCB1bmRlZmluZWQ7XG5cbiAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIGVudGVyID0gZ2V0RW50ZXJGdW5jdGlvbihoYW5kbGVyKTtcbiAgICBleGl0ID0gZ2V0RXhpdEZ1bmN0aW9uKGhhbmRsZXIpO1xuICB9XG5cbiAgbGV0IHJlc3VsdDogTm9kZSB8IE5vZGVbXSB8IHVuZGVmaW5lZCB8IG51bGwgfCB2b2lkO1xuICBpZiAoZW50ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIHJlc3VsdCA9IGVudGVyKG5vZGUpO1xuICB9XG5cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdCAhPT0gbnVsbCkge1xuICAgIGlmIChKU09OLnN0cmluZ2lmeShub2RlKSA9PT0gSlNPTi5zdHJpbmdpZnkocmVzdWx0KSkge1xuICAgICAgcmVzdWx0ID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gdmlzaXRBcnJheSh2aXNpdG9yLCByZXN1bHQpIHx8IHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZpc2l0Tm9kZSh2aXNpdG9yLCByZXN1bHQpIHx8IHJlc3VsdDtcbiAgICB9XG4gIH1cblxuICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICBsZXQga2V5cyA9IHZpc2l0b3JLZXlzW25vZGUudHlwZV07XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIHdlIGtub3cgaWYgaXQgaGFzIGNoaWxkIGtleXMgd2UgY2FuIHdpZGVuIHRvIGEgUGFyZW50Tm9kZVxuICAgICAgdmlzaXRLZXkodmlzaXRvciwgaGFuZGxlciwgbm9kZSBhcyBQYXJlbnROb2RlLCBrZXlzW2ldKTtcbiAgICB9XG5cbiAgICBpZiAoZXhpdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHQgPSBleGl0KG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHZpc2l0S2V5KFxuICB2aXNpdG9yOiBOb2RlVmlzaXRvcixcbiAgaGFuZGxlcjogTm9kZUhhbmRsZXIgfCB1bmRlZmluZWQsXG4gIG5vZGU6IFBhcmVudE5vZGUsXG4gIGtleTogQ2hpbGRLZXlcbikge1xuICBsZXQgdmFsdWUgPSBub2RlW2tleV0gYXMgTm9kZSB8IE5vZGVbXSB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQga2V5RW50ZXI6IEtleUZ1bmN0aW9uIHwgdW5kZWZpbmVkO1xuICBsZXQga2V5RXhpdDogS2V5RnVuY3Rpb24gfCB1bmRlZmluZWQ7XG5cbiAgaWYgKGhhbmRsZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIGxldCBrZXlIYW5kbGVyID0gZ2V0S2V5SGFuZGxlcihoYW5kbGVyLCBrZXkpO1xuICAgIGlmIChrZXlIYW5kbGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGtleUVudGVyID0gZ2V0RW50ZXJGdW5jdGlvbihrZXlIYW5kbGVyKTtcbiAgICAgIGtleUV4aXQgPSBnZXRFeGl0RnVuY3Rpb24oa2V5SGFuZGxlcik7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleUVudGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoa2V5RW50ZXIobm9kZSwga2V5KSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBjYW5ub3RSZXBsYWNlT3JSZW1vdmVJbktleUhhbmRsZXJZZXQobm9kZSwga2V5KTtcbiAgICB9XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB2aXNpdEFycmF5KHZpc2l0b3IsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcmVzdWx0ID0gdmlzaXROb2RlKHZpc2l0b3IsIHZhbHVlKTtcbiAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGFzc2lnbktleShub2RlLCBrZXksIHJlc3VsdCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleUV4aXQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChrZXlFeGl0KG5vZGUsIGtleSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgY2Fubm90UmVwbGFjZU9yUmVtb3ZlSW5LZXlIYW5kbGVyWWV0KG5vZGUsIGtleSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZpc2l0QXJyYXkodmlzaXRvcjogTm9kZVZpc2l0b3IsIGFycmF5OiBOb2RlW10pIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgIGxldCByZXN1bHQgPSB2aXNpdE5vZGUodmlzaXRvciwgYXJyYXlbaV0pO1xuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaSArPSBzcGxpY2VBcnJheShhcnJheSwgaSwgcmVzdWx0KSAtIDE7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2lnbktleShub2RlOiBOb2RlLCBrZXk6IENoaWxkS2V5LCByZXN1bHQ6IE5vZGUgfCBOb2RlW10gfCBudWxsKSB7XG4gIGlmIChyZXN1bHQgPT09IG51bGwpIHtcbiAgICB0aHJvdyBjYW5ub3RSZW1vdmVOb2RlKG5vZGVba2V5XSwgbm9kZSwga2V5KTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgbm9kZVtrZXldID0gcmVzdWx0WzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocmVzdWx0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBjYW5ub3RSZW1vdmVOb2RlKG5vZGVba2V5XSwgbm9kZSwga2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGNhbm5vdFJlcGxhY2VOb2RlKG5vZGVba2V5XSwgbm9kZSwga2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbm9kZVtrZXldID0gcmVzdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIHNwbGljZUFycmF5KGFycmF5OiBOb2RlW10sIGluZGV4OiBudW1iZXIsIHJlc3VsdDogTm9kZSB8IE5vZGVbXSB8IG51bGwpIHtcbiAgaWYgKHJlc3VsdCA9PT0gbnVsbCkge1xuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIDA7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXN1bHQpKSB7XG4gICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxLCAuLi5yZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIGFycmF5LnNwbGljZShpbmRleCwgMSwgcmVzdWx0KTtcbiAgICByZXR1cm4gMTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmF2ZXJzZShub2RlOiBOb2RlLCB2aXNpdG9yOiBOb2RlVmlzaXRvcikge1xuICB2aXNpdE5vZGUodmlzaXRvciwgbm9kZSk7XG59XG4iXX0=