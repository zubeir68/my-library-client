import { EventedTokenizer, EntityParser, HTML5NamedCharRefs as namedCharRefs } from 'simple-html-tokenizer';
import { assert } from '@glimmer/util';
const entityParser = new EntityParser(namedCharRefs);
export class Parser {
    constructor(source) {
        this.elementStack = [];
        this.currentAttribute = null;
        this.currentNode = null;
        this.tokenizer = new EventedTokenizer(this, entityParser);
        this.source = source.split(/(?:\r\n?|\n)/g);
    }
    get currentAttr() {
        return this.currentAttribute;
    }
    get currentTag() {
        let node = this.currentNode;
        (false && assert(node && (node.type === 'StartTag' || node.type === 'EndTag'), 'expected tag'));

        return node;
    }
    get currentStartTag() {
        let node = this.currentNode;
        (false && assert(node && node.type === 'StartTag', 'expected start tag'));

        return node;
    }
    get currentEndTag() {
        let node = this.currentNode;
        (false && assert(node && node.type === 'EndTag', 'expected end tag'));

        return node;
    }
    get currentComment() {
        let node = this.currentNode;
        (false && assert(node && node.type === 'CommentStatement', 'expected a comment'));

        return node;
    }
    get currentData() {
        let node = this.currentNode;
        (false && assert(node && node.type === 'TextNode', 'expected a text node'));

        return node;
    }
    acceptNode(node) {
        return this[node.type](node);
    }
    currentElement() {
        return this.elementStack[this.elementStack.length - 1];
    }
    sourceForNode(node, endNode) {
        let firstLine = node.loc.start.line - 1;
        let currentLine = firstLine - 1;
        let firstColumn = node.loc.start.column;
        let string = [];
        let line;
        let lastLine;
        let lastColumn;
        if (endNode) {
            lastLine = endNode.loc.end.line - 1;
            lastColumn = endNode.loc.end.column;
        } else {
            lastLine = node.loc.end.line - 1;
            lastColumn = node.loc.end.column;
        }
        while (currentLine < lastLine) {
            currentLine++;
            line = this.source[currentLine];
            if (currentLine === firstLine) {
                if (firstLine === lastLine) {
                    string.push(line.slice(firstColumn, lastColumn));
                } else {
                    string.push(line.slice(firstColumn));
                }
            } else if (currentLine === lastLine) {
                string.push(line.slice(0, lastColumn));
            } else {
                string.push(line);
            }
        }
        return string.join('\n');
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvc3ludGF4L2xpYi9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQUFBTyxTQUNMLEFBQWdCLGtCQUNoQixBQUFZLGNBQ1osQUFBa0Isc0JBQUksQUFBYSxBQUNwQyxxQkFBTSxBQUF1QixBQUFDO0FBSy9CLEFBQU8sU0FBRSxBQUFNLEFBQUUsQUFBTSxBQUFFLGNBQU0sQUFBZSxBQUFDO0FBRS9DLE1BQU0sQUFBWSxlQUFHLElBQUksQUFBWSxhQUFDLEFBQWEsQUFBQyxBQUFDO0FBd0JyRCxBQUFNO0FBU0osZ0JBQVksQUFBYztBQVJoQixhQUFZLGVBQWMsQUFBRSxBQUFDO0FBRWhDLGFBQWdCLG1CQUFzQixBQUFJLEFBQUM7QUFDM0MsYUFBVyxjQUVkLEFBQUksQUFBQztBQUNGLGFBQVMsWUFBRyxJQUFJLEFBQWdCLGlCQUFDLEFBQUksTUFBRSxBQUFZLEFBQUMsQUFBQztBQUcxRCxBQUFJLGFBQUMsQUFBTSxTQUFHLEFBQU0sT0FBQyxBQUFLLE1BQUMsQUFBZSxBQUFDLEFBQUMsQUFDOUM7QUFBQztBQXNCRCxRQUFJLEFBQVc7QUFDYixBQUFPLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBZ0IsQUFBRSxBQUFvQixBQUFDLEFBQUMsQUFDN0Q7QUFBQztBQUVELFFBQUksQUFBVTtBQUNaLFlBQUksQUFBSSxPQUFHLEFBQUksS0FBQyxBQUFXLEFBQUM7a0JBQzVCLEFBQU0sT0FBQyxBQUFJLEFBQUksU0FBQyxBQUFJLEtBQUMsQUFBSSxTQUFLLEFBQVUsY0FBSSxBQUFJLEtBQUMsQUFBSSxTQUFLLEFBQVEsQUFBQyxXQUFFLEFBQWMsQUFBQyxBQUFDOztBQUNyRixlQUFPLEFBQWtDLEFBQUMsQUFDNUM7QUFBQztBQUVELFFBQUksQUFBZTtBQUNqQixZQUFJLEFBQUksT0FBRyxBQUFJLEtBQUMsQUFBVyxBQUFDO2tCQUM1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QztBQUN4QyxhQUZNLE1BRUE7QUFDTCxBQUFNLHVCQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQztBQUNuQjtBQUNGO0FBRUQsZUFBTyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQzNCO0FBQUMsQUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEV2ZW50ZWRUb2tlbml6ZXIsXG4gIEVudGl0eVBhcnNlcixcbiAgSFRNTDVOYW1lZENoYXJSZWZzIGFzIG5hbWVkQ2hhclJlZnMsXG59IGZyb20gJ3NpbXBsZS1odG1sLXRva2VuaXplcic7XG5pbXBvcnQgeyBQcm9ncmFtIH0gZnJvbSAnLi90eXBlcy9ub2Rlcyc7XG5pbXBvcnQgKiBhcyBBU1QgZnJvbSAnLi90eXBlcy9ub2Rlcyc7XG5pbXBvcnQgKiBhcyBIYW5kbGViYXJzQVNUIGZyb20gJy4vdHlwZXMvaGFuZGxlYmFycy1hc3QnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBhc3NlcnQsIGV4cGVjdCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5jb25zdCBlbnRpdHlQYXJzZXIgPSBuZXcgRW50aXR5UGFyc2VyKG5hbWVkQ2hhclJlZnMpO1xuXG5leHBvcnQgdHlwZSBFbGVtZW50ID0gQVNULlByb2dyYW0gfCBBU1QuRWxlbWVudE5vZGU7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFnPFQgZXh0ZW5kcyAnU3RhcnRUYWcnIHwgJ0VuZFRhZyc+IHtcbiAgdHlwZTogVDtcbiAgbmFtZTogc3RyaW5nO1xuICBhdHRyaWJ1dGVzOiBhbnlbXTtcbiAgbW9kaWZpZXJzOiBhbnlbXTtcbiAgY29tbWVudHM6IGFueVtdO1xuICBzZWxmQ2xvc2luZzogYm9vbGVhbjtcbiAgbG9jOiBBU1QuU291cmNlTG9jYXRpb247XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXR0cmlidXRlIHtcbiAgbmFtZTogc3RyaW5nO1xuICBwYXJ0czogKEFTVC5NdXN0YWNoZVN0YXRlbWVudCB8IEFTVC5UZXh0Tm9kZSlbXTtcbiAgaXNRdW90ZWQ6IGJvb2xlYW47XG4gIGlzRHluYW1pYzogYm9vbGVhbjtcbiAgc3RhcnQ6IEFTVC5Qb3NpdGlvbjtcbiAgdmFsdWVTdGFydExpbmU6IG51bWJlcjtcbiAgdmFsdWVTdGFydENvbHVtbjogbnVtYmVyO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUGFyc2VyIHtcbiAgcHJvdGVjdGVkIGVsZW1lbnRTdGFjazogRWxlbWVudFtdID0gW107XG4gIHByaXZhdGUgc291cmNlOiBzdHJpbmdbXTtcbiAgcHVibGljIGN1cnJlbnRBdHRyaWJ1dGU6IE9wdGlvbjxBdHRyaWJ1dGU+ID0gbnVsbDtcbiAgcHVibGljIGN1cnJlbnROb2RlOiBPcHRpb248XG4gICAgQVNULkNvbW1lbnRTdGF0ZW1lbnQgfCBBU1QuVGV4dE5vZGUgfCBUYWc8J1N0YXJ0VGFnJyB8ICdFbmRUYWcnPlxuICA+ID0gbnVsbDtcbiAgcHVibGljIHRva2VuaXplciA9IG5ldyBFdmVudGVkVG9rZW5pemVyKHRoaXMsIGVudGl0eVBhcnNlcik7XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZS5zcGxpdCgvKD86XFxyXFxuP3xcXG4pL2cpO1xuICB9XG5cbiAgYWJzdHJhY3QgcmVzZXQoKTogdm9pZDtcbiAgYWJzdHJhY3QgZmluaXNoRGF0YSgpOiB2b2lkO1xuICBhYnN0cmFjdCB0YWdPcGVuKCk6IHZvaWQ7XG4gIGFic3RyYWN0IGJlZ2luRGF0YSgpOiB2b2lkO1xuICBhYnN0cmFjdCBhcHBlbmRUb0RhdGEoY2hhcjogc3RyaW5nKTogdm9pZDtcbiAgYWJzdHJhY3QgYmVnaW5TdGFydFRhZygpOiB2b2lkO1xuICBhYnN0cmFjdCBhcHBlbmRUb1RhZ05hbWUoY2hhcjogc3RyaW5nKTogdm9pZDtcbiAgYWJzdHJhY3QgYmVnaW5BdHRyaWJ1dGUoKTogdm9pZDtcbiAgYWJzdHJhY3QgYXBwZW5kVG9BdHRyaWJ1dGVOYW1lKGNoYXI6IHN0cmluZyk6IHZvaWQ7XG4gIGFic3RyYWN0IGJlZ2luQXR0cmlidXRlVmFsdWUocXVvdGVkOiBib29sZWFuKTogdm9pZDtcbiAgYWJzdHJhY3QgYXBwZW5kVG9BdHRyaWJ1dGVWYWx1ZShjaGFyOiBzdHJpbmcpOiB2b2lkO1xuICBhYnN0cmFjdCBmaW5pc2hBdHRyaWJ1dGVWYWx1ZSgpOiB2b2lkO1xuICBhYnN0cmFjdCBtYXJrVGFnQXNTZWxmQ2xvc2luZygpOiB2b2lkO1xuICBhYnN0cmFjdCBiZWdpbkVuZFRhZygpOiB2b2lkO1xuICBhYnN0cmFjdCBmaW5pc2hUYWcoKTogdm9pZDtcbiAgYWJzdHJhY3QgYmVnaW5Db21tZW50KCk6IHZvaWQ7XG4gIGFic3RyYWN0IGFwcGVuZFRvQ29tbWVudERhdGEoY2hhcjogc3RyaW5nKTogdm9pZDtcbiAgYWJzdHJhY3QgZmluaXNoQ29tbWVudCgpOiB2b2lkO1xuICBhYnN0cmFjdCByZXBvcnRTeW50YXhFcnJvcihlcnJvcjogc3RyaW5nKTogdm9pZDtcblxuICBnZXQgY3VycmVudEF0dHIoKTogQXR0cmlidXRlIHtcbiAgICByZXR1cm4gZXhwZWN0KHRoaXMuY3VycmVudEF0dHJpYnV0ZSwgJ2V4cGVjdGVkIGF0dHJpYnV0ZScpO1xuICB9XG5cbiAgZ2V0IGN1cnJlbnRUYWcoKTogVGFnPCdTdGFydFRhZycgfCAnRW5kVGFnJz4ge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiAobm9kZS50eXBlID09PSAnU3RhcnRUYWcnIHx8IG5vZGUudHlwZSA9PT0gJ0VuZFRhZycpLCAnZXhwZWN0ZWQgdGFnJyk7XG4gICAgcmV0dXJuIG5vZGUgYXMgVGFnPCdTdGFydFRhZycgfCAnRW5kVGFnJz47XG4gIH1cblxuICBnZXQgY3VycmVudFN0YXJ0VGFnKCk6IFRhZzwnU3RhcnRUYWcnPiB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLmN1cnJlbnROb2RlO1xuICAgIGFzc2VydChub2RlICYmIG5vZGUudHlwZSA9PT0gJ1N0YXJ0VGFnJywgJ2V4cGVjdGVkIHN0YXJ0IHRhZycpO1xuICAgIHJldHVybiBub2RlIGFzIFRhZzwnU3RhcnRUYWcnPjtcbiAgfVxuXG4gIGdldCBjdXJyZW50RW5kVGFnKCk6IFRhZzwnRW5kVGFnJz4ge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiBub2RlLnR5cGUgPT09ICdFbmRUYWcnLCAnZXhwZWN0ZWQgZW5kIHRhZycpO1xuICAgIHJldHVybiBub2RlIGFzIFRhZzwnRW5kVGFnJz47XG4gIH1cblxuICBnZXQgY3VycmVudENvbW1lbnQoKTogQVNULkNvbW1lbnRTdGF0ZW1lbnQge1xuICAgIGxldCBub2RlID0gdGhpcy5jdXJyZW50Tm9kZTtcbiAgICBhc3NlcnQobm9kZSAmJiBub2RlLnR5cGUgPT09ICdDb21tZW50U3RhdGVtZW50JywgJ2V4cGVjdGVkIGEgY29tbWVudCcpO1xuICAgIHJldHVybiBub2RlIGFzIEFTVC5Db21tZW50U3RhdGVtZW50O1xuICB9XG5cbiAgZ2V0IGN1cnJlbnREYXRhKCk6IEFTVC5UZXh0Tm9kZSB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLmN1cnJlbnROb2RlO1xuICAgIGFzc2VydChub2RlICYmIG5vZGUudHlwZSA9PT0gJ1RleHROb2RlJywgJ2V4cGVjdGVkIGEgdGV4dCBub2RlJyk7XG4gICAgcmV0dXJuIG5vZGUgYXMgQVNULlRleHROb2RlO1xuICB9XG5cbiAgYWNjZXB0Tm9kZShub2RlOiBIYW5kbGViYXJzQVNULlByb2dyYW0pOiBQcm9ncmFtO1xuICBhY2NlcHROb2RlPFUgZXh0ZW5kcyBBU1QuTm9kZT4obm9kZTogSGFuZGxlYmFyc0FTVC5Ob2RlKTogVTtcbiAgYWNjZXB0Tm9kZShub2RlOiBIYW5kbGViYXJzQVNULk5vZGUpOiBhbnkge1xuICAgIHJldHVybiB0aGlzW25vZGUudHlwZV0obm9kZSk7XG4gIH1cblxuICBjdXJyZW50RWxlbWVudCgpOiBFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50U3RhY2tbdGhpcy5lbGVtZW50U3RhY2subGVuZ3RoIC0gMV07XG4gIH1cblxuICBzb3VyY2VGb3JOb2RlKG5vZGU6IEhhbmRsZWJhcnNBU1QuTm9kZSwgZW5kTm9kZT86IHsgbG9jOiBIYW5kbGViYXJzQVNULlNvdXJjZUxvY2F0aW9uIH0pOiBzdHJpbmcge1xuICAgIGxldCBmaXJzdExpbmUgPSBub2RlLmxvYy5zdGFydC5saW5lIC0gMTtcbiAgICBsZXQgY3VycmVudExpbmUgPSBmaXJzdExpbmUgLSAxO1xuICAgIGxldCBmaXJzdENvbHVtbiA9IG5vZGUubG9jLnN0YXJ0LmNvbHVtbjtcbiAgICBsZXQgc3RyaW5nID0gW107XG4gICAgbGV0IGxpbmU7XG5cbiAgICBsZXQgbGFzdExpbmU6IG51bWJlcjtcbiAgICBsZXQgbGFzdENvbHVtbjogbnVtYmVyO1xuXG4gICAgaWYgKGVuZE5vZGUpIHtcbiAgICAgIGxhc3RMaW5lID0gZW5kTm9kZS5sb2MuZW5kLmxpbmUgLSAxO1xuICAgICAgbGFzdENvbHVtbiA9IGVuZE5vZGUubG9jLmVuZC5jb2x1bW47XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3RMaW5lID0gbm9kZS5sb2MuZW5kLmxpbmUgLSAxO1xuICAgICAgbGFzdENvbHVtbiA9IG5vZGUubG9jLmVuZC5jb2x1bW47XG4gICAgfVxuXG4gICAgd2hpbGUgKGN1cnJlbnRMaW5lIDwgbGFzdExpbmUpIHtcbiAgICAgIGN1cnJlbnRMaW5lKys7XG4gICAgICBsaW5lID0gdGhpcy5zb3VyY2VbY3VycmVudExpbmVdO1xuXG4gICAgICBpZiAoY3VycmVudExpbmUgPT09IGZpcnN0TGluZSkge1xuICAgICAgICBpZiAoZmlyc3RMaW5lID09PSBsYXN0TGluZSkge1xuICAgICAgICAgIHN0cmluZy5wdXNoKGxpbmUuc2xpY2UoZmlyc3RDb2x1bW4sIGxhc3RDb2x1bW4pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChsaW5lLnNsaWNlKGZpcnN0Q29sdW1uKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudExpbmUgPT09IGxhc3RMaW5lKSB7XG4gICAgICAgIHN0cmluZy5wdXNoKGxpbmUuc2xpY2UoMCwgbGFzdENvbHVtbikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyaW5nLnB1c2gobGluZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZy5qb2luKCdcXG4nKTtcbiAgfVxufVxuIl19