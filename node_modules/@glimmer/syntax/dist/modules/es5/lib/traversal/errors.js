var TraversalError = function () {
    TraversalError.prototype = Object.create(Error.prototype);
    TraversalError.prototype.constructor = TraversalError;
    function TraversalError(message, node, parent, key) {
        var error = Error.call(this, message);
        this.key = key;
        this.message = message;
        this.node = node;
        this.parent = parent;
        this.stack = error.stack;
    }
    return TraversalError;
}();
export default TraversalError;
export function cannotRemoveNode(node, parent, key) {
    return new TraversalError('Cannot remove a node unless it is part of an array', node, parent, key);
}
export function cannotReplaceNode(node, parent, key) {
    return new TraversalError('Cannot replace a node with multiple nodes unless it is part of an array', node, parent, key);
}
export function cannotReplaceOrRemoveInKeyHandlerYet(node, key) {
    return new TraversalError('Replacing and removing in key handlers is not yet supported.', node, null, key);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvc3ludGF4L2xpYi90cmF2ZXJzYWwvZXJyb3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWVBLElBQU0sQUFBYyw2QkFDbEIsQUFBYzttQkFBQyxBQUFTLFlBQUcsQUFBTSxPQUFDLEFBQU0sT0FBQyxBQUFLLE1BQUMsQUFBUyxBQUFDLEFBQUMsQUFDMUQsQUFBYzttQkFBQyxBQUFTLFVBQUMsQUFBVyxjQUFHLEFBQWMsQUFBQyxBQUV0RDs0QkFFRSxBQUFlLFNBQ2YsQUFBYyxNQUNkLEFBQXdCLFFBQ3hCLEFBQVcsS0FFWDtZQUFJLEFBQUssUUFBRyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUksTUFBRSxBQUFPLEFBQUMsQUFBQyxBQUV0QyxBQUFJO2FBQUMsQUFBRyxNQUFHLEFBQUcsQUFBQyxBQUNmLEFBQUk7YUFBQyxBQUFPLFVBQUcsQUFBTyxBQUFDLEFBQ3ZCLEFBQUk7YUFBQyxBQUFJLE9BQUcsQUFBSSxBQUFDLEFBQ2pCLEFBQUk7YUFBQyxBQUFNLFNBQUcsQUFBTSxBQUFDLEFBQ3JCLEFBQUk7YUFBQyxBQUFLLFFBQUcsQUFBSyxNQUFDLEFBQUssQUFBQyxBQUMzQixBQUFDO0FBRUQ7V0FBTyxBQUFxQixBQUFDLEFBQy9CLEFBQUMsQUFBQyxBQUFFLEFBQUM7QUFyQjZDLENBQUM7QUF1Qm5ELGVBQWUsQUFBYyxBQUFDO0FBRTlCLEFBQU0saUNBQTJCLEFBQWMsTUFBRSxBQUFnQixRQUFFLEFBQVcsS0FDNUU7V0FBTyxJQUFJLEFBQWMsZUFDdkIsQUFBb0Qsc0RBQ3BELEFBQUksTUFDSixBQUFNLFFBQ04sQUFBRyxBQUNKLEFBQUMsQUFDSixBQUFDOztBQUVELEFBQU0sa0NBQTRCLEFBQWMsTUFBRSxBQUFnQixRQUFFLEFBQVcsS0FDN0U7V0FBTyxJQUFJLEFBQWMsZUFDdkIsQUFBeUUsMkVBQ3pFLEFBQUksTUFDSixBQUFNLFFBQ04sQUFBRyxBQUNKLEFBQUMsQUFDSixBQUFDOztBQUVELEFBQU0scURBQStDLEFBQWMsTUFBRSxBQUFXLEtBQzlFO1dBQU8sSUFBSSxBQUFjLGVBQ3ZCLEFBQThELGdFQUM5RCxBQUFJLE1BQ0osQUFBSSxNQUNKLEFBQUcsQUFDSixBQUFDLEFBQ0osQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFTVCBmcm9tICcuLi90eXBlcy9ub2Rlcyc7XG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGludGVyZmFjZSBUcmF2ZXJzYWxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3I6IFRyYXZlcnNhbEVycm9yQ29uc3RydWN0b3I7XG4gIGtleTogc3RyaW5nO1xuICBub2RlOiBBU1QuTm9kZTtcbiAgcGFyZW50OiBPcHRpb248QVNULk5vZGU+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYXZlcnNhbEVycm9yQ29uc3RydWN0b3Ige1xuICBuZXcgKG1lc3NhZ2U6IHN0cmluZywgbm9kZTogQVNULk5vZGUsIHBhcmVudDogT3B0aW9uPEFTVC5Ob2RlPiwga2V5OiBzdHJpbmcpOiBUcmF2ZXJzYWxFcnJvcjtcbiAgcmVhZG9ubHkgcHJvdG90eXBlOiBUcmF2ZXJzYWxFcnJvcjtcbn1cblxuY29uc3QgVHJhdmVyc2FsRXJyb3I6IFRyYXZlcnNhbEVycm9yQ29uc3RydWN0b3IgPSAoZnVuY3Rpb24oKSB7XG4gIFRyYXZlcnNhbEVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgVHJhdmVyc2FsRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHJhdmVyc2FsRXJyb3I7XG5cbiAgZnVuY3Rpb24gVHJhdmVyc2FsRXJyb3IoXG4gICAgdGhpczogVHJhdmVyc2FsRXJyb3IsXG4gICAgbWVzc2FnZTogc3RyaW5nLFxuICAgIG5vZGU6IEFTVC5Ob2RlLFxuICAgIHBhcmVudDogT3B0aW9uPEFTVC5Ob2RlPixcbiAgICBrZXk6IHN0cmluZ1xuICApIHtcbiAgICBsZXQgZXJyb3IgPSBFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuXG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgfVxuXG4gIHJldHVybiBUcmF2ZXJzYWxFcnJvciBhcyBhbnk7XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBUcmF2ZXJzYWxFcnJvcjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhbm5vdFJlbW92ZU5vZGUobm9kZTogQVNULk5vZGUsIHBhcmVudDogQVNULk5vZGUsIGtleTogc3RyaW5nKSB7XG4gIHJldHVybiBuZXcgVHJhdmVyc2FsRXJyb3IoXG4gICAgJ0Nhbm5vdCByZW1vdmUgYSBub2RlIHVubGVzcyBpdCBpcyBwYXJ0IG9mIGFuIGFycmF5JyxcbiAgICBub2RlLFxuICAgIHBhcmVudCxcbiAgICBrZXlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbm5vdFJlcGxhY2VOb2RlKG5vZGU6IEFTVC5Ob2RlLCBwYXJlbnQ6IEFTVC5Ob2RlLCBrZXk6IHN0cmluZykge1xuICByZXR1cm4gbmV3IFRyYXZlcnNhbEVycm9yKFxuICAgICdDYW5ub3QgcmVwbGFjZSBhIG5vZGUgd2l0aCBtdWx0aXBsZSBub2RlcyB1bmxlc3MgaXQgaXMgcGFydCBvZiBhbiBhcnJheScsXG4gICAgbm9kZSxcbiAgICBwYXJlbnQsXG4gICAga2V5XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5ub3RSZXBsYWNlT3JSZW1vdmVJbktleUhhbmRsZXJZZXQobm9kZTogQVNULk5vZGUsIGtleTogc3RyaW5nKSB7XG4gIHJldHVybiBuZXcgVHJhdmVyc2FsRXJyb3IoXG4gICAgJ1JlcGxhY2luZyBhbmQgcmVtb3ZpbmcgaW4ga2V5IGhhbmRsZXJzIGlzIG5vdCB5ZXQgc3VwcG9ydGVkLicsXG4gICAgbm9kZSxcbiAgICBudWxsLFxuICAgIGtleVxuICApO1xufVxuIl19