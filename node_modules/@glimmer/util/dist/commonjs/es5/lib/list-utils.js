"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

var ListNode = exports.ListNode = function ListNode(value) {
    _classCallCheck(this, ListNode);

    this.next = null;
    this.prev = null;
    this.value = value;
};
var LinkedList = exports.LinkedList = function () {
    function LinkedList() {
        _classCallCheck(this, LinkedList);

        this.clear();
    }

    LinkedList.prototype.head = function head() {
        return this._head;
    };

    LinkedList.prototype.tail = function tail() {
        return this._tail;
    };

    LinkedList.prototype.clear = function clear() {
        this._head = this._tail = null;
    };

    LinkedList.prototype.toArray = function toArray() {
        var out = [];
        this.forEachNode(function (n) {
            return out.push(n);
        });
        return out;
    };

    LinkedList.prototype.nextNode = function nextNode(node) {
        return node.next;
    };

    LinkedList.prototype.forEachNode = function forEachNode(callback) {
        var node = this._head;
        while (node !== null) {
            callback(node);
            node = node.next;
        }
    };

    LinkedList.prototype.insertBefore = function insertBefore(node) {
        var reference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (reference === null) return this.append(node);
        if (reference.prev) reference.prev.next = node;else this._head = node;
        node.prev = reference.prev;
        node.next = reference;
        reference.prev = node;
        return node;
    };

    LinkedList.prototype.append = function append(node) {
        var tail = this._tail;
        if (tail) {
            tail.next = node;
            node.prev = tail;
            node.next = null;
        } else {
            this._head = node;
        }
        return this._tail = node;
    };

    LinkedList.prototype.remove = function remove(node) {
        if (node.prev) node.prev.next = node.next;else this._head = node.next;
        if (node.next) node.next.prev = node.prev;else this._tail = node.prev;
        return node;
    };

    return LinkedList;
}();
var ListSlice = exports.ListSlice = function () {
    function ListSlice(head, tail) {
        _classCallCheck(this, ListSlice);

        this._head = head;
        this._tail = tail;
    }

    ListSlice.prototype.forEachNode = function forEachNode(callback) {
        var node = this._head;
        while (node !== null) {
            callback(node);
            node = this.nextNode(node);
        }
    };

    ListSlice.prototype.head = function head() {
        return this._head;
    };

    ListSlice.prototype.tail = function tail() {
        return this._tail;
    };

    ListSlice.prototype.toArray = function toArray() {
        var out = [];
        this.forEachNode(function (n) {
            return out.push(n);
        });
        return out;
    };

    ListSlice.prototype.nextNode = function nextNode(node) {
        if (node === this._tail) return null;
        return node.next;
    };

    return ListSlice;
}();
var EMPTY_SLICE = exports.EMPTY_SLICE = new ListSlice(null, null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL2xpc3QtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBT0EsQUFBTTs7SUFLSixnREFBWSxBQUFRLE9BSmI7OztTQUFJLE9BQXdCLEFBQUksQUFBQyxBQUNqQztTQUFJLE9BQXdCLEFBQUksQUFBQyxBQUl0QyxBQUFJO1NBQUMsQUFBSyxRQUFHLEFBQUssQUFBQyxBQUNyQixBQUFDLEFBQ0Y7QUFNRCxBQUFNO0lBSUo7MEJBQ0UsQUFBSTs7O2FBQUMsQUFBSyxBQUFFLEFBQUMsQUFDZixBQUFDLEFBRUQsQUFBSTs7O2dEQUNGO2VBQU8sQUFBSSxLQUFDLEFBQUssQUFBQyxBQUNwQixBQUFDLEFBRUQsQUFBSTs7O2dEQUNGO2VBQU8sQUFBSSxLQUFDLEFBQUssQUFBQyxBQUNwQixBQUFDLEFBRUQsQUFBSzs7O2tEQUNILEFBQUk7YUFBQyxBQUFLLFFBQUcsQUFBSSxLQUFDLEFBQUssUUFBRyxBQUFJLEFBQUMsQUFDakMsQUFBQyxBQUVELEFBQU87OztzREFDTDtZQUFJLEFBQUcsTUFBUSxBQUFFLEFBQUMsQUFDbEIsQUFBSTthQUFDLEFBQVcseUJBQUMsQUFBQyxBQUFDLEFBQUU7bUJBQUMsQUFBRyxJQUFDLEFBQUksS0FBQyxBQUFDLEFBQUMsQUFBQyxBQUFDLEFBQ25DOztlQUFPLEFBQUcsQUFBQyxBQUNiLEFBQUMsQUFFRCxBQUFROzs7c0RBQUMsQUFBTyxNQUNkO2VBQU8sQUFBSSxLQUFDLEFBQWEsQUFBQyxBQUM1QixBQUFDLEFBRUQsQUFBVzs7OzREQUFDLEFBQTJCLFVBQ3JDO1lBQUksQUFBSSxPQUFHLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFFdEI7ZUFBTyxBQUFJLFNBQUssQUFBSSxNQUFFLEFBQ3BCLEFBQVE7cUJBQUMsQUFBYSxBQUFDLEFBQUMsQUFDeEIsQUFBSTttQkFB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QUFFLEFBQUksQUFBQyxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnLi9wbGF0Zm9ybS11dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlua2VkTGlzdE5vZGUge1xuICBuZXh0OiBPcHRpb248TGlua2VkTGlzdE5vZGU+O1xuICBwcmV2OiBPcHRpb248TGlua2VkTGlzdE5vZGU+O1xufVxuXG5leHBvcnQgY2xhc3MgTGlzdE5vZGU8VD4gaW1wbGVtZW50cyBMaW5rZWRMaXN0Tm9kZSB7XG4gIHB1YmxpYyBuZXh0OiBPcHRpb248TGlzdE5vZGU8VD4+ID0gbnVsbDtcbiAgcHVibGljIHByZXY6IE9wdGlvbjxMaXN0Tm9kZTxUPj4gPSBudWxsO1xuICBwdWJsaWMgdmFsdWU6IFQ7XG5cbiAgY29uc3RydWN0b3IodmFsdWU6IFQpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbn1cblxuLy8gd2UgYXJlIHVuYWJsZSB0byBleHByZXNzIHRoZSBjb25zdHJhaW50IHRoYXQgVCdzIC5wcmV2IGFuZCAubmV4dCBhcmVcbi8vIHRoZW1zZWx2ZXMgVC4gSG93ZXZlciwgaXQgd2lsbCBhbHdheXMgYmUgdHJ1ZSwgc28gdHJ1c3QgdXMuXG50eXBlIHRydXN0ID0gYW55O1xuXG5leHBvcnQgY2xhc3MgTGlua2VkTGlzdDxUIGV4dGVuZHMgTGlua2VkTGlzdE5vZGU+IGltcGxlbWVudHMgU2xpY2U8VD4ge1xuICBwcml2YXRlIF9oZWFkITogT3B0aW9uPFQ+O1xuICBwcml2YXRlIF90YWlsITogT3B0aW9uPFQ+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2xlYXIoKTtcbiAgfVxuXG4gIGhlYWQoKTogT3B0aW9uPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5faGVhZDtcbiAgfVxuXG4gIHRhaWwoKTogT3B0aW9uPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5fdGFpbDtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuX2hlYWQgPSB0aGlzLl90YWlsID0gbnVsbDtcbiAgfVxuXG4gIHRvQXJyYXkoKTogVFtdIHtcbiAgICBsZXQgb3V0OiBUW10gPSBbXTtcbiAgICB0aGlzLmZvckVhY2hOb2RlKG4gPT4gb3V0LnB1c2gobikpO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBuZXh0Tm9kZShub2RlOiBUKTogVCB7XG4gICAgcmV0dXJuIG5vZGUubmV4dCBhcyB0cnVzdDtcbiAgfVxuXG4gIGZvckVhY2hOb2RlKGNhbGxiYWNrOiAobm9kZTogVCkgPT4gdm9pZCkge1xuICAgIGxldCBub2RlID0gdGhpcy5faGVhZDtcblxuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayhub2RlIGFzIHRydXN0KTtcbiAgICAgIG5vZGUgPSBub2RlLm5leHQgYXMgdHJ1c3Q7XG4gICAgfVxuICB9XG5cbiAgaW5zZXJ0QmVmb3JlKG5vZGU6IFQsIHJlZmVyZW5jZTogT3B0aW9uPFQ+ID0gbnVsbCk6IFQge1xuICAgIGlmIChyZWZlcmVuY2UgPT09IG51bGwpIHJldHVybiB0aGlzLmFwcGVuZChub2RlKTtcblxuICAgIGlmIChyZWZlcmVuY2UucHJldikgcmVmZXJlbmNlLnByZXYubmV4dCA9IG5vZGU7XG4gICAgZWxzZSB0aGlzLl9oZWFkID0gbm9kZTtcblxuICAgIG5vZGUucHJldiA9IHJlZmVyZW5jZS5wcmV2O1xuICAgIG5vZGUubmV4dCA9IHJlZmVyZW5jZTtcbiAgICByZWZlcmVuY2UucHJldiA9IG5vZGU7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIGFwcGVuZChub2RlOiBUKTogVCB7XG4gICAgbGV0IHRhaWwgPSB0aGlzLl90YWlsO1xuXG4gICAgaWYgKHRhaWwpIHtcbiAgICAgIHRhaWwubmV4dCA9IG5vZGU7XG4gICAgICBub2RlLnByZXYgPSB0YWlsO1xuICAgICAgbm9kZS5uZXh0ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5faGVhZCA9IG5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuICh0aGlzLl90YWlsID0gbm9kZSk7XG4gIH1cblxuICByZW1vdmUobm9kZTogVCk6IFQge1xuICAgIGlmIChub2RlLnByZXYpIG5vZGUucHJldi5uZXh0ID0gbm9kZS5uZXh0O1xuICAgIGVsc2UgdGhpcy5faGVhZCA9IG5vZGUubmV4dCBhcyB0cnVzdDtcblxuICAgIGlmIChub2RlLm5leHQpIG5vZGUubmV4dC5wcmV2ID0gbm9kZS5wcmV2O1xuICAgIGVsc2UgdGhpcy5fdGFpbCA9IG5vZGUucHJldiBhcyB0cnVzdDtcblxuICAgIHJldHVybiBub2RlO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2xpY2U8VCBleHRlbmRzIExpbmtlZExpc3ROb2RlPiB7XG4gIGhlYWQoKTogT3B0aW9uPFQ+O1xuICB0YWlsKCk6IE9wdGlvbjxUPjtcbiAgbmV4dE5vZGUobm9kZTogVCk6IE9wdGlvbjxUPjtcbiAgZm9yRWFjaE5vZGUoY2FsbGJhY2s6IChub2RlOiBUKSA9PiB2b2lkKTogdm9pZDtcbiAgdG9BcnJheSgpOiBUW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvbmVhYmxlTGlzdE5vZGUgZXh0ZW5kcyBMaW5rZWRMaXN0Tm9kZSB7XG4gIGNsb25lKCk6IHRoaXM7XG59XG5cbmV4cG9ydCBjbGFzcyBMaXN0U2xpY2U8VCBleHRlbmRzIExpbmtlZExpc3ROb2RlPiBpbXBsZW1lbnRzIFNsaWNlPFQ+IHtcbiAgcHJpdmF0ZSBfaGVhZDogT3B0aW9uPFQ+O1xuICBwcml2YXRlIF90YWlsOiBPcHRpb248VD47XG5cbiAgY29uc3RydWN0b3IoaGVhZDogT3B0aW9uPFQ+LCB0YWlsOiBPcHRpb248VD4pIHtcbiAgICB0aGlzLl9oZWFkID0gaGVhZDtcbiAgICB0aGlzLl90YWlsID0gdGFpbDtcbiAgfVxuXG4gIGZvckVhY2hOb2RlKGNhbGxiYWNrOiAobm9kZTogVCkgPT4gdm9pZCkge1xuICAgIGxldCBub2RlID0gdGhpcy5faGVhZDtcblxuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgIG5vZGUgPSB0aGlzLm5leHROb2RlKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGhlYWQoKTogT3B0aW9uPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5faGVhZDtcbiAgfVxuXG4gIHRhaWwoKTogT3B0aW9uPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5fdGFpbDtcbiAgfVxuXG4gIHRvQXJyYXkoKTogVFtdIHtcbiAgICBsZXQgb3V0OiBUW10gPSBbXTtcbiAgICB0aGlzLmZvckVhY2hOb2RlKG4gPT4gb3V0LnB1c2gobikpO1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBuZXh0Tm9kZShub2RlOiBUKTogT3B0aW9uPFQ+IHtcbiAgICBpZiAobm9kZSA9PT0gdGhpcy5fdGFpbCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIG5vZGUubmV4dCBhcyBUO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBFTVBUWV9TTElDRSA9IG5ldyBMaXN0U2xpY2UobnVsbCwgbnVsbCk7XG4iXX0=