var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { ensureGuid } from './guid';
export function dict() {
    return Object.create(null);
}
export var DictSet = function () {
    function DictSet() {
        _classCallCheck(this, DictSet);

        this.dict = dict();
    }

    DictSet.prototype.add = function add(obj) {
        if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;
        return this;
    };

    DictSet.prototype.delete = function _delete(obj) {
        if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];
    };

    return DictSet;
}();
export var Stack = function () {
    function Stack() {
        _classCallCheck(this, Stack);

        this.stack = [];
        this.current = null;
    }

    Stack.prototype.push = function push(item) {
        this.current = item;
        this.stack.push(item);
    };

    Stack.prototype.pop = function pop() {
        var item = this.stack.pop();
        var len = this.stack.length;
        this.current = len === 0 ? null : this.stack[len - 1];
        return item === undefined ? null : item;
    };

    Stack.prototype.isEmpty = function isEmpty() {
        return this.stack.length === 0;
    };

    _createClass(Stack, [{
        key: 'size',
        get: function get() {
            return this.stack.length;
        }
    }]);

    return Stack;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci91dGlsL2xpYi9jb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsQUFBTyxTQUFXLEFBQVUsQUFBRSxrQkFBTSxBQUFRLEFBQUM7QUFZN0MsQUFBTSx1QkFDSjtXQUFPLEFBQU0sT0FBQyxBQUFNLE9BQUMsQUFBSSxBQUFDLEFBQUMsQUFDN0IsQUFBQzs7QUFJRCxBQUFNLFdBR0o7O0FBQ0UsQUFBSTs7YUFBQyxBQUFJLE9BQUcsQUFBSSxBQUFLLEFBQUMsQUFDeEIsQUFBQztBQUVELEFBQUc7O3lDQUFDLEFBQU0sS0FDUjtZQUFJLE9BQU8sQUFBRyxRQUFLLEFBQVEsVUFBRSxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQVUsQUFBQyxPQUFHLEFBQUcsQUFBQyxTQUNwRCxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQVUsV0FBQyxBQUFVLEFBQUMsQUFBQyxRQUFHLEFBQUcsQUFBQyxBQUM3QztlQUFPLEFBQUksQUFBQyxBQUNkLEFBQUM7QUFFRCxBQUFNOztnREFBQyxBQUFNLEtBQ1g7WUFBSSxPQUFPLEFBQUcsUUFBSyxBQUFRLFVBQUUsT0FBTyxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQVUsQUFBQyxBQUFDLFVBQ3JELElBQUssQUFBVyxJQUFDLEFBQUssT0FBRSxPQUFPLEFBQUksS0FBQyxBQUFJLEtBQUUsQUFBVyxJQUFDLEFBQUssQUFBQyxBQUFDLEFBQ3BFLEFBQUMsQUFDRjs7Ozs7QUFFRCxBQUFNLFdBQU47O0FBQ1U7O2FBQUssUUFBUSxBQUFFLEFBQUMsQUFDakI7YUFBTyxVQUFjLEFBQUksQUFBQyxBQXNCbkMsQUFBQztBQXBCQyxBQUFXLEFBQUk7O3lDQUlWLEFBQU8sTUFDVixBQUFJO2FBQUMsQUFBTyxVQUFHLEFBQUksQUFBQyxBQUNwQixBQUFJO2FBQUMsQUFBSyxNQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQyxBQUN4QixBQUFDO0FBRUQsQUFBRzs7eUNBQ0Q7WUFBSSxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLEFBQUUsQUFBQyxBQUM1QjtZQUFJLEFBQUcsTUFBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQU0sQUFBQyxBQUM1QixBQUFJO2FBQUMsQUFBTyxVQUFHLEFBQUcsUUFBSyxBQUFDLEFBQUMsQUFBQyxJQUFDLEFBQUksQUFBQyxBQUFDLE9BQUMsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLE1BQUcsQUFBQyxBQUFDLEFBQUMsQUFFdEQ7ZUFBTyxBQUFJLFNBQUssQUFBUyxBQUFDLEFBQUMsWUFBQyxBQUFJLEFBQUMsQUFBQyxPQUFDLEFBQUksQUFBQyxBQUMxQyxBQUFDO0FBRUQsQUFBTzs7aURBQ0w7ZUFBTyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQU0sV0FBSyxBQUFDLEFBQUMsQUFDakMsQUFBQyxBQUNGOzs7Ozs0QkFuQkc7bUJBQU8sQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFNLEFBQUMsQUFDM0IsQUFBQztBQUVELEFBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIYXNHdWlkLCBlbnN1cmVHdWlkIH0gZnJvbSAnLi9ndWlkJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vcGxhdGZvcm0tdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERpY3Q8VD4ge1xuICBbaW5kZXg6IHN0cmluZ106IFQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2V0PFQ+IHtcbiAgYWRkKHZhbHVlOiBUKTogU2V0PFQ+O1xuICBkZWxldGUodmFsdWU6IFQpOiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGljdDxUPigpOiBEaWN0PFQ+IHtcbiAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5cbmV4cG9ydCB0eXBlIFNldE1lbWJlciA9IEhhc0d1aWQgfCBzdHJpbmc7XG5cbmV4cG9ydCBjbGFzcyBEaWN0U2V0PFQgZXh0ZW5kcyBTZXRNZW1iZXI+IGltcGxlbWVudHMgU2V0PFQ+IHtcbiAgcHJpdmF0ZSBkaWN0OiBEaWN0PFQ+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZGljdCA9IGRpY3Q8VD4oKTtcbiAgfVxuXG4gIGFkZChvYmo6IFQpOiBTZXQ8VD4ge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgdGhpcy5kaWN0W29iaiBhcyBhbnldID0gb2JqO1xuICAgIGVsc2UgdGhpcy5kaWN0W2Vuc3VyZUd1aWQob2JqIGFzIGFueSldID0gb2JqO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVsZXRlKG9iajogVCkge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykgZGVsZXRlIHRoaXMuZGljdFtvYmogYXMgYW55XTtcbiAgICBlbHNlIGlmICgob2JqIGFzIGFueSkuX2d1aWQpIGRlbGV0ZSB0aGlzLmRpY3RbKG9iaiBhcyBhbnkpLl9ndWlkXTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhY2s8VD4ge1xuICBwcml2YXRlIHN0YWNrOiBUW10gPSBbXTtcbiAgcHVibGljIGN1cnJlbnQ6IE9wdGlvbjxUPiA9IG51bGw7XG5cbiAgcHVibGljIGdldCBzaXplKCkge1xuICAgIHJldHVybiB0aGlzLnN0YWNrLmxlbmd0aDtcbiAgfVxuXG4gIHB1c2goaXRlbTogVCkge1xuICAgIHRoaXMuY3VycmVudCA9IGl0ZW07XG4gICAgdGhpcy5zdGFjay5wdXNoKGl0ZW0pO1xuICB9XG5cbiAgcG9wKCk6IE9wdGlvbjxUPiB7XG4gICAgbGV0IGl0ZW0gPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgIGxldCBsZW4gPSB0aGlzLnN0YWNrLmxlbmd0aDtcbiAgICB0aGlzLmN1cnJlbnQgPSBsZW4gPT09IDAgPyBudWxsIDogdGhpcy5zdGFja1tsZW4gLSAxXTtcblxuICAgIHJldHVybiBpdGVtID09PSB1bmRlZmluZWQgPyBudWxsIDogaXRlbTtcbiAgfVxuXG4gIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhY2subGVuZ3RoID09PSAwO1xuICB9XG59XG4iXX0=