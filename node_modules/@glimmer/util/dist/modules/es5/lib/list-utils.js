function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

export var ListNode = function ListNode(value) {
    _classCallCheck(this, ListNode);

    this.next = null;
    this.prev = null;
    this.value = value;
};
export var LinkedList = function () {
    function LinkedList() {
        _classCallCheck(this, LinkedList);

        this.clear();
    }

    LinkedList.prototype.head = function head() {
        return this._head;
    };

    LinkedList.prototype.tail = function tail() {
        return this._tail;
    };

    LinkedList.prototype.clear = function clear() {
        this._head = this._tail = null;
    };

    LinkedList.prototype.toArray = function toArray() {
        var out = [];
        this.forEachNode(function (n) {
            return out.push(n);
        });
        return out;
    };

    LinkedList.prototype.nextNode = function nextNode(node) {
        return node.next;
    };

    LinkedList.prototype.forEachNode = function forEachNode(callback) {
        var node = this._head;
        while (node !== null) {
            callback(node);
            node = node.next;
        }
    };

    LinkedList.prototype.insertBefore = function insertBefore(node) {
        var reference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (reference === null) return this.append(node);
        if (reference.prev) reference.prev.next = node;else this._head = node;
        node.prev = reference.prev;
        node.next = reference;
        reference.prev = node;
        return node;
    };

    LinkedList.prototype.append = function append(node) {
        var tail = this._tail;
        if (tail) {
            tail.next = node;
            node.prev = tail;
            node.next = null;
        } else {
            this._head = node;
        }
        return this._tail = node;
    };

    LinkedList.prototype.remove = function remove(node) {
        if (node.prev) node.prev.next = node.next;else this._head = node.next;
        if (node.next) node.next.prev = node.prev;else this._tail = node.prev;
        return node;
    };

    return LinkedList;
}();
export var ListSlice = function () {
    function ListSlice(head, tail) {
        _classCallCheck(this, ListSlice);

        this._head = head;
        this._tail = tail;
    }

    ListSlice.prototype.forEachNode = function forEachNode(callback) {
        var node = this._head;
        while (node !== null) {
            callback(node);
            node = this.nextNode(node);
        }
    };

    ListSlice.prototype.head = function head() {
        return this._head;
    };

    ListSlice.prototype.tail = function tail() {
        return this._tail;
    };

    ListSlice.prototype.toArray = function toArray() {
        var out = [];
        this.forEachNode(function (n) {
            return out.push(n);
        });
        return out;
    };

    ListSlice.prototype.nextNode = function nextNode(node) {
        if (node === this._tail) return null;
        return node.next;
    };

    return ListSlice;
}();
export var EMPTY_SLICE = new ListSlice(null, null);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL2xpc3QtdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFPQSxBQUFNLFdBS0osNkJBQVksQUFBUTtBQUpiOztTQUFJLE9BQXdCLEFBQUksQUFBQyxBQUNqQztTQUFJLE9BQXdCLEFBQUksQUFBQyxBQUl0QyxBQUFJO1NBQUMsQUFBSyxRQUFHLEFBQUssQUFBQyxBQUNyQixBQUFDLEFBQ0Y7O0FBTUQsQUFBTSxXQUlKOztBQUNFLEFBQUk7O2FBQUMsQUFBSyxBQUFFLEFBQUMsQUFDZixBQUFDO0FBRUQsQUFBSTs7Z0RBQ0Y7ZUFBTyxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQ3BCLEFBQUM7QUFFRCxBQUFJOztnREFDRjtlQUFPLEFBQUksS0FBQyxBQUFLLEFBQUMsQUFDcEIsQUFBQztBQUVELEFBQUs7O2tEQUNILEFBQUk7YUFBQyxBQUFLLFFBQUcsQUFBSSxLQUFDLEFBQUssUUFBRyxBQUFJLEFBQUMsQUFDakMsQUFBQztBQUVELEFBQU87O3NEQUNMO1lBQUksQUFBRyxNQUFRLEFBQUUsQUFBQyxBQUNsQixBQUFJO2FBQUMsQUFBVztBQUFDLEFBQUMsQUFBQyxBQUFFLG1CQUFDLEFBQUcsSUFBQyxBQUFJLEtBQUMsQUFBQyxBQUFDLEFBQUMsQUFBQyxBQUNuQzs7ZUFBTyxBQUFHLEFBQUMsQUFDYixBQUFDO0FBRUQsQUFBUTs7c0RBQUMsQUFBTyxNQUNkO2VBQU8sQUFBSSxLQUFDLEFBQWEsQUFBQyxBQUM1QixBQUFDO0FBRUQsQUFBVzs7NERBQUMsQUFBMkIsVUFDckM7WUFBSSxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQUssQUFBQyxBQUV0QjtlQUFPLEFBQUksU0FBSyxBQUFJLE1BQUUsQUFDcEIsQUFBUTtxQkFBQyxBQUFhLEFBQUMsQUFBQyxBQUN4QixBQUFJO21CQUFHLEFBQUksS0FBQyxBQUFh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ZXNDb250ZW50IjpbImltcG9ydCB7IE9wdGlvbiB9IGZyb20gJy4vcGxhdGZvcm0tdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExpbmtlZExpc3ROb2RlIHtcbiAgbmV4dDogT3B0aW9uPExpbmtlZExpc3ROb2RlPjtcbiAgcHJldjogT3B0aW9uPExpbmtlZExpc3ROb2RlPjtcbn1cblxuZXhwb3J0IGNsYXNzIExpc3ROb2RlPFQ+IGltcGxlbWVudHMgTGlua2VkTGlzdE5vZGUge1xuICBwdWJsaWMgbmV4dDogT3B0aW9uPExpc3ROb2RlPFQ+PiA9IG51bGw7XG4gIHB1YmxpYyBwcmV2OiBPcHRpb248TGlzdE5vZGU8VD4+ID0gbnVsbDtcbiAgcHVibGljIHZhbHVlOiBUO1xuXG4gIGNvbnN0cnVjdG9yKHZhbHVlOiBUKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB9XG59XG5cbi8vIHdlIGFyZSB1bmFibGUgdG8gZXhwcmVzcyB0aGUgY29uc3RyYWludCB0aGF0IFQncyAucHJldiBhbmQgLm5leHQgYXJlXG4vLyB0aGVtc2VsdmVzIFQuIEhvd2V2ZXIsIGl0IHdpbGwgYWx3YXlzIGJlIHRydWUsIHNvIHRydXN0IHVzLlxudHlwZSB0cnVzdCA9IGFueTtcblxuZXhwb3J0IGNsYXNzIExpbmtlZExpc3Q8VCBleHRlbmRzIExpbmtlZExpc3ROb2RlPiBpbXBsZW1lbnRzIFNsaWNlPFQ+IHtcbiAgcHJpdmF0ZSBfaGVhZCE6IE9wdGlvbjxUPjtcbiAgcHJpdmF0ZSBfdGFpbCE6IE9wdGlvbjxUPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNsZWFyKCk7XG4gIH1cblxuICBoZWFkKCk6IE9wdGlvbjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX2hlYWQ7XG4gIH1cblxuICB0YWlsKCk6IE9wdGlvbjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX3RhaWw7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICB0aGlzLl9oZWFkID0gdGhpcy5fdGFpbCA9IG51bGw7XG4gIH1cblxuICB0b0FycmF5KCk6IFRbXSB7XG4gICAgbGV0IG91dDogVFtdID0gW107XG4gICAgdGhpcy5mb3JFYWNoTm9kZShuID0+IG91dC5wdXNoKG4pKTtcbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgbmV4dE5vZGUobm9kZTogVCk6IFQge1xuICAgIHJldHVybiBub2RlLm5leHQgYXMgdHJ1c3Q7XG4gIH1cblxuICBmb3JFYWNoTm9kZShjYWxsYmFjazogKG5vZGU6IFQpID0+IHZvaWQpIHtcbiAgICBsZXQgbm9kZSA9IHRoaXMuX2hlYWQ7XG5cbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgY2FsbGJhY2sobm9kZSBhcyB0cnVzdCk7XG4gICAgICBub2RlID0gbm9kZS5uZXh0IGFzIHRydXN0O1xuICAgIH1cbiAgfVxuXG4gIGluc2VydEJlZm9yZShub2RlOiBULCByZWZlcmVuY2U6IE9wdGlvbjxUPiA9IG51bGwpOiBUIHtcbiAgICBpZiAocmVmZXJlbmNlID09PSBudWxsKSByZXR1cm4gdGhpcy5hcHBlbmQobm9kZSk7XG5cbiAgICBpZiAocmVmZXJlbmNlLnByZXYpIHJlZmVyZW5jZS5wcmV2Lm5leHQgPSBub2RlO1xuICAgIGVsc2UgdGhpcy5faGVhZCA9IG5vZGU7XG5cbiAgICBub2RlLnByZXYgPSByZWZlcmVuY2UucHJldjtcbiAgICBub2RlLm5leHQgPSByZWZlcmVuY2U7XG4gICAgcmVmZXJlbmNlLnByZXYgPSBub2RlO1xuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBhcHBlbmQobm9kZTogVCk6IFQge1xuICAgIGxldCB0YWlsID0gdGhpcy5fdGFpbDtcblxuICAgIGlmICh0YWlsKSB7XG4gICAgICB0YWlsLm5leHQgPSBub2RlO1xuICAgICAgbm9kZS5wcmV2ID0gdGFpbDtcbiAgICAgIG5vZGUubmV4dCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hlYWQgPSBub2RlO1xuICAgIH1cblxuICAgIHJldHVybiAodGhpcy5fdGFpbCA9IG5vZGUpO1xuICB9XG5cbiAgcmVtb3ZlKG5vZGU6IFQpOiBUIHtcbiAgICBpZiAobm9kZS5wcmV2KSBub2RlLnByZXYubmV4dCA9IG5vZGUubmV4dDtcbiAgICBlbHNlIHRoaXMuX2hlYWQgPSBub2RlLm5leHQgYXMgdHJ1c3Q7XG5cbiAgICBpZiAobm9kZS5uZXh0KSBub2RlLm5leHQucHJldiA9IG5vZGUucHJldjtcbiAgICBlbHNlIHRoaXMuX3RhaWwgPSBub2RlLnByZXYgYXMgdHJ1c3Q7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNsaWNlPFQgZXh0ZW5kcyBMaW5rZWRMaXN0Tm9kZT4ge1xuICBoZWFkKCk6IE9wdGlvbjxUPjtcbiAgdGFpbCgpOiBPcHRpb248VD47XG4gIG5leHROb2RlKG5vZGU6IFQpOiBPcHRpb248VD47XG4gIGZvckVhY2hOb2RlKGNhbGxiYWNrOiAobm9kZTogVCkgPT4gdm9pZCk6IHZvaWQ7XG4gIHRvQXJyYXkoKTogVFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENsb25lYWJsZUxpc3ROb2RlIGV4dGVuZHMgTGlua2VkTGlzdE5vZGUge1xuICBjbG9uZSgpOiB0aGlzO1xufVxuXG5leHBvcnQgY2xhc3MgTGlzdFNsaWNlPFQgZXh0ZW5kcyBMaW5rZWRMaXN0Tm9kZT4gaW1wbGVtZW50cyBTbGljZTxUPiB7XG4gIHByaXZhdGUgX2hlYWQ6IE9wdGlvbjxUPjtcbiAgcHJpdmF0ZSBfdGFpbDogT3B0aW9uPFQ+O1xuXG4gIGNvbnN0cnVjdG9yKGhlYWQ6IE9wdGlvbjxUPiwgdGFpbDogT3B0aW9uPFQ+KSB7XG4gICAgdGhpcy5faGVhZCA9IGhlYWQ7XG4gICAgdGhpcy5fdGFpbCA9IHRhaWw7XG4gIH1cblxuICBmb3JFYWNoTm9kZShjYWxsYmFjazogKG5vZGU6IFQpID0+IHZvaWQpIHtcbiAgICBsZXQgbm9kZSA9IHRoaXMuX2hlYWQ7XG5cbiAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgY2FsbGJhY2sobm9kZSk7XG4gICAgICBub2RlID0gdGhpcy5uZXh0Tm9kZShub2RlKTtcbiAgICB9XG4gIH1cblxuICBoZWFkKCk6IE9wdGlvbjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX2hlYWQ7XG4gIH1cblxuICB0YWlsKCk6IE9wdGlvbjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX3RhaWw7XG4gIH1cblxuICB0b0FycmF5KCk6IFRbXSB7XG4gICAgbGV0IG91dDogVFtdID0gW107XG4gICAgdGhpcy5mb3JFYWNoTm9kZShuID0+IG91dC5wdXNoKG4pKTtcbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgbmV4dE5vZGUobm9kZTogVCk6IE9wdGlvbjxUPiB7XG4gICAgaWYgKG5vZGUgPT09IHRoaXMuX3RhaWwpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBub2RlLm5leHQgYXMgVDtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgRU1QVFlfU0xJQ0UgPSBuZXcgTGlzdFNsaWNlKG51bGwsIG51bGwpO1xuIl19