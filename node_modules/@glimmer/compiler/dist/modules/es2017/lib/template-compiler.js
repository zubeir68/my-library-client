import TemplateVisitor from './template-visitor';
import JavaScriptCompiler from './javascript-compiler';
import { assert } from '@glimmer/util';
import { isLiteral, SyntaxError } from '@glimmer/syntax';
import { getAttrNamespace } from './utils';
import { SymbolAllocator } from './allocate-symbols';
function isTrustedValue(value) {
    return value.escaped !== undefined && !value.escaped;
}
export const THIS = 0;
export default class TemplateCompiler {
    constructor() {
        this.templateId = 0;
        this.templateIds = [];
        this.opcodes = [];
        this.includeMeta = false;
    }
    static compile(ast, options) {
        let templateVisitor = new TemplateVisitor();
        templateVisitor.visit(ast);
        let compiler = new TemplateCompiler();
        let opcodes = compiler.process(templateVisitor.actions);
        let symbols = new SymbolAllocator(opcodes).process();
        return JavaScriptCompiler.process(symbols, ast['symbols'], options);
    }
    process(actions) {
        actions.forEach(([name, ...args]) => {
            if (!this[name]) {
                throw new Error(`Unimplemented ${name} on TemplateCompiler`);
            }
            this[name](...args);
        });
        return this.opcodes;
    }
    startProgram([program]) {
        this.opcode(['startProgram', program], program);
    }
    endProgram() {
        this.opcode(['endProgram', null], null);
    }
    startBlock([program]) {
        this.templateId++;
        this.opcode(['startBlock', program], program);
    }
    endBlock() {
        this.templateIds.push(this.templateId - 1);
        this.opcode(['endBlock', null], null);
    }
    text([action]) {
        this.opcode(['text', action.chars], action);
    }
    comment([action]) {
        this.opcode(['comment', action.value], action);
    }
    openElement([action]) {
        let attributes = action.attributes;
        let hasSplat;
        for (let i = 0; i < attributes.length; i++) {
            let attr = attributes[i];
            if (attr.name === '...attributes') {
                hasSplat = attr;
                break;
            }
        }
        if (isDynamicComponent(action)) {
            let head, rest;
            [head, ...rest] = action.tag.split('.');
            if (head === 'this') {
                head = 0;
            }
            this.opcode(['get', [head, rest]]);
            this.opcode(['openComponent', action], action);
        } else if (isComponent(action)) {
            this.opcode(['openComponent', action], action);
        } else if (hasSplat) {
            this.opcode(['openSplattedElement', action], action);
        } else {
            this.opcode(['openElement', action], action);
        }
        let typeAttr = null;
        let attrs = action.attributes;
        for (let i = 0; i < attrs.length; i++) {
            if (attrs[i].name === 'type') {
                typeAttr = attrs[i];
                continue;
            }
            this.attribute([attrs[i]]);
        }
        if (typeAttr) {
            this.attribute([typeAttr]);
        }
        this.opcode(['flushElement', action], null);
    }
    closeElement([action]) {
        if (isDynamicComponent(action)) {
            this.opcode(['closeDynamicComponent', action], action);
        } else if (isComponent(action)) {
            this.opcode(['closeComponent', action], action);
        } else if (action.modifiers.length > 0) {
            for (let i = 0; i < action.modifiers.length; i++) {
                this.modifier([action.modifiers[i]]);
            }
            this.opcode(['closeElement', action], action);
        } else {
            this.opcode(['closeElement', action], action);
        }
    }
    attribute([action]) {
        let { name, value } = action;
        let namespace = getAttrNamespace(name);
        let isStatic = this.prepareAttributeValue(value);
        if (name.charAt(0) === '@') {
            // Arguments
            if (isStatic) {
                this.opcode(['staticArg', name], action);
            } else if (action.value.type === 'MustacheStatement') {
                this.opcode(['dynamicArg', name], action);
            } else {
                this.opcode(['dynamicArg', name], action);
            }
        } else {
            let isTrusting = isTrustedValue(value);
            if (isStatic && name === '...attributes') {
                this.opcode(['attrSplat', null], action);
            } else if (isStatic) {
                this.opcode(['staticAttr', [name, namespace]], action);
            } else if (isTrusting) {
                this.opcode(['trustingAttr', [name, namespace]], action);
            } else if (action.value.type === 'MustacheStatement') {
                this.opcode(['dynamicAttr', [name, null]], action);
            } else {
                this.opcode(['dynamicAttr', [name, namespace]], action);
            }
        }
    }
    modifier([action]) {
        assertIsSimplePath(action.path, action.loc, 'modifier');
        let { path: { parts } } = action;
        this.prepareHelper(action);
        this.opcode(['modifier', parts[0]], action);
    }
    mustache([action]) {
        let { path } = action;
        if (isLiteral(path)) {
            this.mustacheExpression(action);
            this.opcode(['append', !action.escaped], action);
        } else if (isYield(path)) {
            let to = assertValidYield(action);
            this.yield(to, action);
        } else if (isPartial(path)) {
            let params = assertValidPartial(action);
            this.partial(params, action);
        } else if (isDebugger(path)) {
            assertValidDebuggerUsage(action);
            this.debugger('debugger', action);
        } else {
            this.mustacheExpression(action);
            this.opcode(['append', !action.escaped], action);
        }
    }
    block([action /*, index, count*/]) {
        this.prepareHelper(action);
        let templateId = this.templateIds.pop();
        let inverseId = action.inverse === null ? null : this.templateIds.pop();
        this.opcode(['block', [action.path.parts[0], templateId, inverseId]], action);
    }
    /// Internal actions, not found in the original processed actions
    arg([path]) {
        let { parts: [head, ...rest] } = path;
        this.opcode(['get', [`@${head}`, rest]], path);
    }
    mustacheExpression(expr) {
        let { path } = expr;
        if (isLiteral(path)) {
            this.opcode(['literal', path.value], expr);
        } else if (isBuiltInHelper(path)) {
            this.builtInHelper(expr);
        } else if (isArg(path)) {
            this.arg([path]);
        } else if (isHelperInvocation(expr)) {
            this.prepareHelper(expr);
            this.opcode(['helper', path.parts[0]], expr);
        } else if (path.this) {
            this.opcode(['get', [0, path.parts]], expr);
        } else {
            let [head, ...parts] = path.parts;
            this.opcode(['maybeGet', [head, parts]], expr);
        }
        // } else if (isLocal(path, this.symbols)) {
        //   let [head, ...parts] = path.parts;
        //   this.opcode(['get', [head, parts]], expr);
        // } else if (isSimplePath(path)) {
        //   this.opcode(['unknown', path.parts[0]], expr);
        // } else {
        //   this.opcode(['maybeLocal', path.parts], expr);
        // }
    }
    /// Internal Syntax
    yield(to, action) {
        this.prepareParams(action.params);
        this.opcode(['yield', to], action);
    }
    debugger(_name, action) {
        this.opcode(['debugger', null], action);
    }
    hasBlock(name, action) {
        this.opcode(['hasBlock', name], action);
    }
    hasBlockParams(name, action) {
        this.opcode(['hasBlockParams', name], action);
    }
    partial(_params, action) {
        this.prepareParams(action.params);
        this.opcode(['partial', null], action);
    }
    builtInHelper(expr) {
        let { path } = expr;
        if (isHasBlock(path)) {
            let name = assertValidHasBlockUsage(expr.path.original, expr);
            this.hasBlock(name, expr);
        } else if (isHasBlockParams(path)) {
            let name = assertValidHasBlockUsage(expr.path.original, expr);
            this.hasBlockParams(name, expr);
        }
    }
    /// Expressions, invoked recursively from prepareParams and prepareHash
    SubExpression(expr) {
        if (isBuiltInHelper(expr.path)) {
            this.builtInHelper(expr);
        } else {
            this.prepareHelper(expr);
            this.opcode(['helper', expr.path.parts[0]], expr);
        }
    }
    PathExpression(expr) {
        if (expr.data) {
            this.arg([expr]);
        } else {
            let [head, ...rest] = expr.parts;
            if (expr.this) {
                this.opcode(['get', [0, expr.parts]], expr);
            } else {
                this.opcode(['get', [head, rest]], expr);
            }
        }
    }
    StringLiteral(action) {
        this.opcode(['literal', action.value], action);
    }
    BooleanLiteral(action) {
        this.opcode(['literal', action.value], action);
    }
    NumberLiteral(action) {
        this.opcode(['literal', action.value], action);
    }
    NullLiteral(action) {
        this.opcode(['literal', action.value], action);
    }
    UndefinedLiteral(action) {
        this.opcode(['literal', action.value], action);
    }
    /// Utilities
    opcode(opcode, action = null) {
        // TODO: This doesn't really work
        if (this.includeMeta && action) {
            opcode.push(this.meta(action));
        }
        this.opcodes.push(opcode);
    }
    prepareHelper(expr) {
        assertIsSimplePath(expr.path, expr.loc, 'helper');
        let { params, hash } = expr;
        this.prepareHash(hash);
        this.prepareParams(params);
    }
    prepareParams(params) {
        if (!params.length) {
            this.opcode(['literal', null], null);
            return;
        }
        for (let i = params.length - 1; i >= 0; i--) {
            let param = params[i];
            (false && assert(this[param.type], `Unimplemented ${param.type} on TemplateCompiler`));

            this[param.type](param);
        }
        this.opcode(['prepareArray', params.length], null);
    }
    prepareHash(hash) {
        let pairs = hash.pairs;
        if (!pairs.length) {
            this.opcode(['literal', null], null);
            return;
        }
        for (let i = pairs.length - 1; i >= 0; i--) {
            let { key, value } = pairs[i];
            (false && assert(this[value.type], `Unimplemented ${value.type} on TemplateCompiler`));

            this[value.type](value);
            this.opcode(['literal', key], null);
        }
        this.opcode(['prepareObject', pairs.length], null);
    }
    prepareAttributeValue(value) {
        // returns the static value if the value is static
        switch (value.type) {
            case 'TextNode':
                this.opcode(['literal', value.chars], value);
                return true;
            case 'MustacheStatement':
                this.attributeMustache([value]);
                return false;
            case 'ConcatStatement':
                this.prepareConcatParts(value.parts);
                this.opcode(['concat', null], value);
                return false;
        }
    }
    prepareConcatParts(parts) {
        for (let i = parts.length - 1; i >= 0; i--) {
            let part = parts[i];
            if (part.type === 'MustacheStatement') {
                this.attributeMustache([part]);
            } else if (part.type === 'TextNode') {
                this.opcode(['literal', part.chars], null);
            }
        }
        this.opcode(['prepareArray', parts.length], null);
    }
    attributeMustache([action]) {
        this.mustacheExpression(action);
    }
    meta(node) {
        let loc = node.loc;
        if (!loc) {
            return [];
        }
        let { source, start, end } = loc;
        return ['loc', [source || null, [start.line, start.column], [end.line, end.column]]];
    }
}
function isHelperInvocation(mustache) {
    return mustache.params && mustache.params.length > 0 || mustache.hash && mustache.hash.pairs.length > 0;
}
function isSimplePath({ parts }) {
    return parts.length === 1;
}
function isYield(path) {
    return path.original === 'yield';
}
function isPartial(path) {
    return path.original === 'partial';
}
function isDebugger(path) {
    return path.original === 'debugger';
}
function isHasBlock(path) {
    return path.original === 'has-block';
}
function isHasBlockParams(path) {
    return path.original === 'has-block-params';
}
function isBuiltInHelper(path) {
    return isHasBlock(path) || isHasBlockParams(path);
}
function isArg(path) {
    return !!path['data'];
}
function isDynamicComponent(element) {
    let open = element.tag.charAt(0);
    let [maybeLocal] = element.tag.split('.');
    let isNamedArgument = open === '@';
    let isLocal = element['symbols'].has(maybeLocal);
    let isThisPath = element.tag.indexOf('this.') === 0;
    return isLocal || isNamedArgument || isThisPath;
}
function isComponent(element) {
    let open = element.tag.charAt(0);
    let isPath = element.tag.indexOf('.') > -1;
    let isUpperCase = open === open.toUpperCase() && open !== open.toLowerCase();
    return isUpperCase && !isPath || isDynamicComponent(element);
}
function assertIsSimplePath(path, loc, context) {
    if (!isSimplePath(path)) {
        throw new SyntaxError(`\`${path.original}\` is not a valid name for a ${context} on line ${loc.start.line}.`, path.loc);
    }
}
function assertValidYield(statement) {
    let { pairs } = statement.hash;
    if (pairs.length === 1 && pairs[0].key !== 'to' || pairs.length > 1) {
        throw new SyntaxError(`yield only takes a single named argument: 'to'`, statement.loc);
    } else if (pairs.length === 1 && pairs[0].value.type !== 'StringLiteral') {
        throw new SyntaxError(`you can only yield to a literal value`, statement.loc);
    } else if (pairs.length === 0) {
        return 'default';
    } else {
        return pairs[0].value.value;
    }
}
function assertValidPartial(statement) {
    let { params, hash, escaped, loc } = statement;
    if (params && params.length !== 1) {
        throw new SyntaxError(`Partial found with no arguments. You must specify a template name. (on line ${loc.start.line})`, statement.loc);
    } else if (hash && hash.pairs.length > 0) {
        throw new SyntaxError(`partial does not take any named arguments (on line ${loc.start.line})`, statement.loc);
    } else if (!escaped) {
        throw new SyntaxError(`{{{partial ...}}} is not supported, please use {{partial ...}} instead (on line ${loc.start.line})`, statement.loc);
    }
    return params;
}
function assertValidHasBlockUsage(type, call) {
    let { params, hash, loc } = call;
    if (hash && hash.pairs.length > 0) {
        throw new SyntaxError(`${type} does not take any named arguments`, call.loc);
    }
    if (params.length === 0) {
        return 'default';
    } else if (params.length === 1) {
        let param = params[0];
        if (param.type === 'StringLiteral') {
            return param.value;
        } else {
            throw new SyntaxError(`you can only yield to a literal value (on line ${loc.start.line})`, call.loc);
        }
    } else {
        throw new SyntaxError(`${type} only takes a single positional argument (on line ${loc.start.line})`, call.loc);
    }
}
function assertValidDebuggerUsage(statement) {
    let { params, hash } = statement;
    if (hash && hash.pairs.length > 0) {
        throw new SyntaxError(`debugger does not take any named arguments`, statement.loc);
    }
    if (params.length === 0) {
        return 'default';
    } else {
        throw new SyntaxError(`debugger does not take any positional arguments`, statement.loc);
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,