var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { assert } from '@glimmer/util';
import { Stack, DictSet } from '@glimmer/util';
import { Ops, isFlushElement, isArgument, isAttribute, isAttrSplat } from '@glimmer/wire-format';
export var Block = function () {
    function Block() {
        _classCallCheck(this, Block);

        this.statements = [];
    }

    Block.prototype.push = function push(statement) {
        this.statements.push(statement);
    };

    return Block;
}();
export var InlineBlock = function (_Block) {
    _inherits(InlineBlock, _Block);

    function InlineBlock(table) {
        _classCallCheck(this, InlineBlock);

        var _this = _possibleConstructorReturn(this, _Block.call(this));

        _this.table = table;
        return _this;
    }

    InlineBlock.prototype.toJSON = function toJSON() {
        return {
            statements: this.statements,
            parameters: this.table.slots
        };
    };

    return InlineBlock;
}(Block);
export var TemplateBlock = function (_Block2) {
    _inherits(TemplateBlock, _Block2);

    function TemplateBlock(symbolTable) {
        _classCallCheck(this, TemplateBlock);

        var _this2 = _possibleConstructorReturn(this, _Block2.call(this));

        _this2.symbolTable = symbolTable;
        _this2.type = 'template';
        _this2.yields = new DictSet();
        _this2.named = new DictSet();
        _this2.blocks = [];
        _this2.hasEval = false;
        return _this2;
    }

    TemplateBlock.prototype.push = function push(statement) {
        this.statements.push(statement);
    };

    TemplateBlock.prototype.toJSON = function toJSON() {
        return {
            symbols: this.symbolTable.symbols,
            statements: this.statements,
            hasEval: this.hasEval
        };
    };

    return TemplateBlock;
}(Block);
export var ComponentBlock = function (_Block3) {
    _inherits(ComponentBlock, _Block3);

    function ComponentBlock(tag, table, selfClosing) {
        _classCallCheck(this, ComponentBlock);

        var _this3 = _possibleConstructorReturn(this, _Block3.call(this));

        _this3.tag = tag;
        _this3.table = table;
        _this3.selfClosing = selfClosing;
        _this3.attributes = [];
        _this3.arguments = [];
        _this3.inParams = true;
        _this3.positionals = [];
        return _this3;
    }

    ComponentBlock.prototype.push = function push(statement) {
        if (this.inParams) {
            if (isFlushElement(statement)) {
                this.inParams = false;
            } else if (isArgument(statement)) {
                this.arguments.push(statement);
            } else if (isAttribute(statement)) {
                this.attributes.push(statement);
            } else if (isAttrSplat(statement)) {
                this.attributes.push(statement);
            } else {
                throw new Error('Compile Error: only parameters allowed before flush-element');
            }
        } else {
            this.statements.push(statement);
        }
    };

    ComponentBlock.prototype.toJSON = function toJSON() {
        var args = this.arguments;
        var keys = args.map(function (arg) {
            return arg[1];
        });
        var values = args.map(function (arg) {
            return arg[2];
        });
        var block = this.selfClosing ? null : {
            statements: this.statements,
            parameters: this.table.slots
        };
        return [this.tag, this.attributes, [keys, values], block];
    };

    return ComponentBlock;
}(Block);
export var Template = function () {
    function Template(symbols) {
        _classCallCheck(this, Template);

        this.block = new TemplateBlock(symbols);
    }

    Template.prototype.toJSON = function toJSON() {
        return this.block.toJSON();
    };

    return Template;
}();

var JavaScriptCompiler = function () {
    function JavaScriptCompiler(opcodes, symbols, options) {
        _classCallCheck(this, JavaScriptCompiler);

        this.blocks = new Stack();
        this.values = [];
        this.opcodes = opcodes;
        this.template = new Template(symbols);
        this.options = options;
    }

    JavaScriptCompiler.process = function process(opcodes, symbols, options) {
        var compiler = new JavaScriptCompiler(opcodes, symbols, options);
        return compiler.process();
    };

    JavaScriptCompiler.prototype.process = function process() {
        var _this4 = this;

        this.opcodes.forEach(function (op) {
            var opcode = op[0];
            var arg = op[1];
            if (!_this4[opcode]) {
                throw new Error('unimplemented ' + opcode + ' on JavaScriptCompiler');
            }
            _this4[opcode](arg);
        });
        return this.template;
    };
    /// Nesting


    JavaScriptCompiler.prototype.startBlock = function startBlock(program) {
        var block = new InlineBlock(program['symbols']);
        this.blocks.push(block);
    };

    JavaScriptCompiler.prototype.endBlock = function endBlock() {
        var template = this.template,
            blocks = this.blocks;

        var block = blocks.pop();
        template.block.blocks.push(block.toJSON());
    };

    JavaScriptCompiler.prototype.startProgram = function startProgram() {
        this.blocks.push(this.template.block);
    };

    JavaScriptCompiler.prototype.endProgram = function endProgram() {};
    /// Statements


    JavaScriptCompiler.prototype.text = function text(content) {
        this.push([Ops.Text, content]);
    };

    JavaScriptCompiler.prototype.append = function append(trusted) {
        this.push([Ops.Append, this.popValue(), trusted]);
    };

    JavaScriptCompiler.prototype.comment = function comment(value) {
        this.push([Ops.Comment, value]);
    };

    JavaScriptCompiler.prototype.modifier = function modifier(name) {
        var params = this.popValue();
        var hash = this.popValue();
        this.push([Ops.Modifier, name, params, hash]);
    };

    JavaScriptCompiler.prototype.block = function block(_ref) {
        var name = _ref[0],
            template = _ref[1],
            inverse = _ref[2];

        var params = this.popValue();
        var hash = this.popValue();
        var blocks = this.template.block.blocks;
        false && assert(typeof template !== 'number' || blocks[template] !== null, 'missing block in the compiler');
        false && assert(typeof inverse !== 'number' || blocks[inverse] !== null, 'missing block in the compiler');

        this.push([Ops.Block, name, params, hash, blocks[template], blocks[inverse]]);
    };

    JavaScriptCompiler.prototype.openComponent = function openComponent(element) {
        var tag = this.options && this.options.customizeComponentName ? this.options.customizeComponentName(element.tag) : element.tag;
        var component = new ComponentBlock(tag, element['symbols'], element.selfClosing);
        this.blocks.push(component);
    };

    JavaScriptCompiler.prototype.openSplattedElement = function openSplattedElement(element) {
        var tag = element.tag;
        if (element.blockParams.length > 0) {
            throw new Error('Compile Error: <' + element.tag + '> is not a component and doesn\'t support block parameters');
        } else {
            this.push([Ops.OpenSplattedElement, tag]);
        }
    };

    JavaScriptCompiler.prototype.openElement = function openElement(element) {
        var tag = element.tag;
        if (element.blockParams.length > 0) {
            throw new Error('Compile Error: <' + element.tag + '> is not a component and doesn\'t support block parameters');
        } else {
            this.push([Ops.OpenElement, tag]);
        }
    };

    JavaScriptCompiler.prototype.flushElement = function flushElement() {
        this.push([Ops.FlushElement]);
    };

    JavaScriptCompiler.prototype.closeComponent = function closeComponent(_element) {
        if (_element.modifiers.length > 0) {
            throw new Error('Compile Error: Element modifiers are not allowed in components');
        }

        var _endComponent = this.endComponent(),
            tag = _endComponent[0],
            attrs = _endComponent[1],
            args = _endComponent[2],
            block = _endComponent[3];

        this.push([Ops.Component, tag, attrs, args, block]);
    };

    JavaScriptCompiler.prototype.closeDynamicComponent = function closeDynamicComponent(_element) {
        var _endComponent2 = this.endComponent(),
            attrs = _endComponent2[1],
            args = _endComponent2[2],
            block = _endComponent2[3];

        this.push([Ops.DynamicComponent, this.popValue(), attrs, args, block]);
    };

    JavaScriptCompiler.prototype.closeElement = function closeElement(_element) {
        this.push([Ops.CloseElement]);
    };

    JavaScriptCompiler.prototype.staticAttr = function staticAttr(_ref2) {
        var name = _ref2[0],
            namespace = _ref2[1];

        var value = this.popValue();
        this.push([Ops.StaticAttr, name, value, namespace]);
    };

    JavaScriptCompiler.prototype.dynamicAttr = function dynamicAttr(_ref3) {
        var name = _ref3[0],
            namespace = _ref3[1];

        var value = this.popValue();
        this.push([Ops.DynamicAttr, name, value, namespace]);
    };

    JavaScriptCompiler.prototype.trustingAttr = function trustingAttr(_ref4) {
        var name = _ref4[0],
            namespace = _ref4[1];

        var value = this.popValue();
        this.push([Ops.TrustingAttr, name, value, namespace]);
    };

    JavaScriptCompiler.prototype.staticArg = function staticArg(name) {
        var value = this.popValue();
        this.push([Ops.StaticArg, name, value]);
    };

    JavaScriptCompiler.prototype.dynamicArg = function dynamicArg(name) {
        var value = this.popValue();
        this.push([Ops.DynamicArg, name, value]);
    };

    JavaScriptCompiler.prototype.yield = function _yield(to) {
        var params = this.popValue();
        this.push([Ops.Yield, to, params]);
    };

    JavaScriptCompiler.prototype.attrSplat = function attrSplat(to) {
        this.push([Ops.AttrSplat, to]);
    };

    JavaScriptCompiler.prototype.debugger = function _debugger(evalInfo) {
        this.push([Ops.Debugger, evalInfo]);
        this.template.block.hasEval = true;
    };

    JavaScriptCompiler.prototype.hasBlock = function hasBlock(name) {
        this.pushValue([Ops.HasBlock, name]);
    };

    JavaScriptCompiler.prototype.hasBlockParams = function hasBlockParams(name) {
        this.pushValue([Ops.HasBlockParams, name]);
    };

    JavaScriptCompiler.prototype.partial = function partial(evalInfo) {
        var params = this.popValue();
        this.push([Ops.Partial, params[0], evalInfo]);
        this.template.block.hasEval = true;
    };
    /// Expressions


    JavaScriptCompiler.prototype.literal = function literal(value) {
        if (value === undefined) {
            this.pushValue([Ops.Undefined]);
        } else {
            this.pushValue(value);
        }
    };

    JavaScriptCompiler.prototype.unknown = function unknown(name) {
        this.pushValue([Ops.Unknown, name]);
    };

    JavaScriptCompiler.prototype.get = function get(_ref5) {
        var head = _ref5[0],
            path = _ref5[1];

        this.pushValue([Ops.Get, head, path]);
    };

    JavaScriptCompiler.prototype.maybeLocal = function maybeLocal(path) {
        this.pushValue([Ops.MaybeLocal, path]);
    };

    JavaScriptCompiler.prototype.concat = function concat() {
        this.pushValue([Ops.Concat, this.popValue()]);
    };

    JavaScriptCompiler.prototype.helper = function helper(name) {
        var params = this.popValue();
        var hash = this.popValue();
        this.pushValue([Ops.Helper, name, params, hash]);
    };
    /// Stack Management Opcodes


    JavaScriptCompiler.prototype.prepareArray = function prepareArray(size) {
        var values = [];
        for (var i = 0; i < size; i++) {
            values.push(this.popValue());
        }
        this.pushValue(values);
    };

    JavaScriptCompiler.prototype.prepareObject = function prepareObject(size) {
        false && assert(this.values.length >= size, 'Expected ' + size + ' values on the stack, found ' + this.values.length);

        var keys = new Array(size);
        var values = new Array(size);
        for (var i = 0; i < size; i++) {
            keys[i] = this.popValue();
            values[i] = this.popValue();
        }
        this.pushValue([keys, values]);
    };
    /// Utilities


    JavaScriptCompiler.prototype.endComponent = function endComponent() {
        var component = this.blocks.pop();
        false && assert(component instanceof ComponentBlock, 'Compiler bug: endComponent() should end a component');

        return component.toJSON();
    };

    JavaScriptCompiler.prototype.push = function push(args) {
        while (args[args.length - 1] === null) {
            args.pop();
        }
        this.currentBlock.push(args);
    };

    JavaScriptCompiler.prototype.pushValue = function pushValue(val) {
        this.values.push(val);
    };

    JavaScriptCompiler.prototype.popValue = function popValue() {
        false && assert(this.values.length, 'No expression found on stack');

        return this.values.pop();
    };

    _createClass(JavaScriptCompiler, [{
        key: 'currentBlock',
        get: function get() {
            return this.blocks.current;
        }
    }]);

    return JavaScriptCompiler;
}();

export default JavaScriptCompiler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,