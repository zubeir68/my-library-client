'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.defaultId = undefined;
exports.precompile = precompile;

var _syntax = require('@glimmer/syntax');

var _templateCompiler = require('./template-compiler');

var _templateCompiler2 = _interopRequireDefault(_templateCompiler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultId = exports.defaultId = function () {
    if (typeof require === 'function') {
        try {
            /* tslint:disable:no-require-imports */
            var crypto = require('crypto');
            /* tslint:enable:no-require-imports */
            var idFn = function idFn(src) {
                var hash = crypto.createHash('sha1');
                hash.update(src, 'utf8');
                // trim to 6 bytes of data (2^48 - 1)
                return hash.digest('base64').substring(0, 8);
            };
            idFn('test');
            return idFn;
        } catch (e) {}
    }
    return function idFn() {
        return null;
    };
}();
var defaultOptions = {
    id: defaultId,
    meta: {}
};
function precompile(string) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;

    var ast = (0, _syntax.preprocess)(string, options);
    var meta = options.meta;

    var _TemplateCompiler$com = _templateCompiler2.default.compile(ast, options),
        block = _TemplateCompiler$com.block;

    var idFn = options.id || defaultId;
    var blockJSON = JSON.stringify(block.toJSON());
    var templateJSONObject = {
        id: idFn(JSON.stringify(meta) + blockJSON),
        block: blockJSON,
        meta: meta
    };
    // JSON is javascript
    return JSON.stringify(templateJSONObject);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9jb21waWxlci9saWIvY29tcGlsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxBQUFPLEFBQUUsQUFBVSxBQUFFLEFBQU0sQUFBaUIsQUFBQzs7QUFDN0MsQUFBTyxBQUFvQyxBQUFNLEFBQXFCLEFBQUMsQUFtQnZFLEFBQU07Ozs7OztJQUFPLEFBQVMsNENBQ3BCO1FBQUksT0FBTyxBQUFPLFlBQUssQUFBVSxZQUFFLEFBQ2pDO1lBQUksQUFDRixBQUF1QyxBQUN2Qzs7Z0JBQU0sQUFBTSxTQUFHLEFBQU8sUUFBQyxBQUFRLEFBQUMsQUFBQyxBQUNqQyxBQUFzQyxBQUV0Qzs7Z0JBQUksQUFBSSxPQUFpQixBQUFHLEFBQUMsQUFBRSxtQkFDN0I7b0JBQUksQUFBSSxPQUFHLEFBQU0sT0FBQyxBQUFVLFdBQUMsQUFBTSxBQUFDLEFBQUMsQUFDckMsQUFBSTtxQkFBQyxBQUFNLE9BQUMsQUFBRyxLQUFFLEFBQU0sQUFBQyxBQUFDLEFBQ3pCLEFBQXFDLEFBQ3JDOzt1QkFBTyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQVEsQUFBQyxVQUFDLEFBQVMsVUFBQyxBQUFDLEdBQUUsQUFBQyxBQUFDLEFBQUMsQUFDL0MsQUFBQyxBQUFDLEFBRUYsQUFBSTs7aUJBQUMsQUFBTSxBQUFDLEFBQUMsQUFFYjttQkFBTyxBQUFJLEFBQUMsQUFDYjtVQUFDLE9BQU8sQUFBQyxHQUFFLEFBQUUsQUFDZixDQUVEOztXQUFPLGdCQUNMO2VBQU8sQUFBSSxBQUFDLEFBQ2QsQUFBQyxBQUFDLEFBQ0osQUFBQyxBQUFDLEFBQUUsQUFBQztBQXZCRSxBQUFnQztDQUFDLEFBQUcsQUFBRTtBQXlCN0MsSUFBTSxBQUFjO1FBQ2QsQUFBUyxBQUNiLEFBQUk7VUFGb0MsQUFDeEMsQUFBRSxBQUNJLEFBQUUsQUFDVCxBQUFDLEFBaUJGLEFBQU07O29CQUNKLEFBQWMsUUFHZDtRQUZBLDhFQUE2QixBQUFjOztRQUV2QyxBQUFHLE1BQUcsQUFBVSx3QkFBQyxBQUFNLFFBQUUsQUFBTyxBQUFDLEFBQUMsQUFDdEMsQUFBSTtRQUFFLEFBQUksQUFBRSxPQUFHLEFBQU8sQUFBQyxBQUN2QixBQUFJOztnQ0FBWSxBQUFnQiwyQkFBQyxBQUFPLFFBQUMsQUFBRyxLQUFFLEFBQU8sQUFBQyxBQUFDLEFBQ3ZEO1FBRE0sQUFBSyxBQUFFOztRQUNULEFBQUksT0FBRyxBQUFPLFFBQUMsQUFBRSxNQUFJLEFBQVMsQUFBQyxBQUNuQztRQUFJLEFBQVMsWUFBRyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQUssTUFBQyxBQUFNLEFBQUUsQUFBQyxBQUFDLEFBQy9DO1FBQUksQUFBa0I7WUFDaEIsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBSSxBQUFDLFFBQUcsQUFBUyxBQUFDLEFBQzFDLEFBQUs7ZUFBRSxBQUFTLEFBQ2hCLEFBQUk7Y0FIa0UsQUFDdEUsQUFBRSxBQUVJLEFBQW9CLEFBQzNCLEFBQUMsQUFFRixBQUFxQixBQUNyQjs7O1dBQU8sQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFrQixBQUFDLEFBQUMsQUFDNUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByZXByb2Nlc3MgfSBmcm9tICdAZ2xpbW1lci9zeW50YXgnO1xuaW1wb3J0IFRlbXBsYXRlQ29tcGlsZXIsIHsgQ29tcGlsZU9wdGlvbnMgfSBmcm9tICcuL3RlbXBsYXRlLWNvbXBpbGVyJztcbmltcG9ydCB7XG4gIFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2ssXG4gIFRlbXBsYXRlSmF2YXNjcmlwdCxcbiAgVGVtcGxhdGVNZXRhLFxufSBmcm9tICdAZ2xpbW1lci93aXJlLWZvcm1hdCc7XG5pbXBvcnQgeyBPcHRpb24gfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFByZXByb2Nlc3NPcHRpb25zIH0gZnJvbSAnQGdsaW1tZXIvc3ludGF4JztcblxuZXhwb3J0IGludGVyZmFjZSBUZW1wbGF0ZUlkRm4ge1xuICAoc3JjOiBzdHJpbmcpOiBPcHRpb248c3RyaW5nPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQcmVjb21waWxlT3B0aW9ucyBleHRlbmRzIENvbXBpbGVPcHRpb25zLCBQcmVwcm9jZXNzT3B0aW9ucyB7XG4gIGlkPzogVGVtcGxhdGVJZEZuO1xufVxuXG5kZWNsYXJlIGZ1bmN0aW9uIHJlcXVpcmUoaWQ6IHN0cmluZyk6IGFueTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRJZDogVGVtcGxhdGVJZEZuID0gKCgpID0+IHtcbiAgaWYgKHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8qIHRzbGludDpkaXNhYmxlOm5vLXJlcXVpcmUtaW1wb3J0cyAqL1xuICAgICAgY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG4gICAgICAvKiB0c2xpbnQ6ZW5hYmxlOm5vLXJlcXVpcmUtaW1wb3J0cyAqL1xuXG4gICAgICBsZXQgaWRGbjogVGVtcGxhdGVJZEZuID0gc3JjID0+IHtcbiAgICAgICAgbGV0IGhhc2ggPSBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpO1xuICAgICAgICBoYXNoLnVwZGF0ZShzcmMsICd1dGY4Jyk7XG4gICAgICAgIC8vIHRyaW0gdG8gNiBieXRlcyBvZiBkYXRhICgyXjQ4IC0gMSlcbiAgICAgICAgcmV0dXJuIGhhc2guZGlnZXN0KCdiYXNlNjQnKS5zdWJzdHJpbmcoMCwgOCk7XG4gICAgICB9O1xuXG4gICAgICBpZEZuKCd0ZXN0Jyk7XG5cbiAgICAgIHJldHVybiBpZEZuO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gaWRGbigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbn0pKCk7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBQcmVjb21waWxlT3B0aW9ucyA9IHtcbiAgaWQ6IGRlZmF1bHRJZCxcbiAgbWV0YToge30sXG59O1xuXG4vKlxuICogQ29tcGlsZSBhIHN0cmluZyBpbnRvIGEgdGVtcGxhdGUgamF2YXNjcmlwdCBzdHJpbmcuXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqICAgICBpbXBvcnQgeyBwcmVjb21waWxlIH0gZnJvbSAnQGdsaW1tZXIvY29tcGlsZXInO1xuICogICAgIGltcG9ydCB7IHRlbXBsYXRlRmFjdG9yeSB9IGZyb20gJ2dsaW1lci1ydW50aW1lJztcbiAqICAgICBsZXQgdGVtcGxhdGVKcyA9IHByZWNvbXBpbGUoXCJIb3dkeSB7e25hbWV9fVwiKTtcbiAqICAgICBsZXQgZmFjdG9yeSA9IHRlbXBsYXRlRmFjdG9yeShuZXcgRnVuY3Rpb24oXCJyZXR1cm4gXCIgKyB0ZW1wbGF0ZUpzKSgpKTtcbiAqICAgICBsZXQgdGVtcGxhdGUgPSBmYWN0b3J5LmNyZWF0ZShlbnYpO1xuICpcbiAqIEBtZXRob2QgcHJlY29tcGlsZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBhIEdsaW1tZXIgdGVtcGxhdGUgc3RyaW5nXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGEgdGVtcGxhdGUgamF2YXNjcmlwdCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZWNvbXBpbGUoc3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQcmVjb21waWxlT3B0aW9ucyk6IFRlbXBsYXRlSmF2YXNjcmlwdDtcbmV4cG9ydCBmdW5jdGlvbiBwcmVjb21waWxlKFxuICBzdHJpbmc6IHN0cmluZyxcbiAgb3B0aW9uczogUHJlY29tcGlsZU9wdGlvbnMgPSBkZWZhdWx0T3B0aW9uc1xuKTogVGVtcGxhdGVKYXZhc2NyaXB0IHtcbiAgbGV0IGFzdCA9IHByZXByb2Nlc3Moc3RyaW5nLCBvcHRpb25zKTtcbiAgbGV0IHsgbWV0YSB9ID0gb3B0aW9ucztcbiAgbGV0IHsgYmxvY2sgfSA9IFRlbXBsYXRlQ29tcGlsZXIuY29tcGlsZShhc3QsIG9wdGlvbnMpO1xuICBsZXQgaWRGbiA9IG9wdGlvbnMuaWQgfHwgZGVmYXVsdElkO1xuICBsZXQgYmxvY2tKU09OID0gSlNPTi5zdHJpbmdpZnkoYmxvY2sudG9KU09OKCkpO1xuICBsZXQgdGVtcGxhdGVKU09OT2JqZWN0OiBTZXJpYWxpemVkVGVtcGxhdGVXaXRoTGF6eUJsb2NrPFRlbXBsYXRlTWV0YT4gPSB7XG4gICAgaWQ6IGlkRm4oSlNPTi5zdHJpbmdpZnkobWV0YSkgKyBibG9ja0pTT04pLFxuICAgIGJsb2NrOiBibG9ja0pTT04sXG4gICAgbWV0YTogbWV0YSBhcyBUZW1wbGF0ZU1ldGEsXG4gIH07XG5cbiAgLy8gSlNPTiBpcyBqYXZhc2NyaXB0XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh0ZW1wbGF0ZUpTT05PYmplY3QpO1xufVxuIl19