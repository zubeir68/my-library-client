'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.defaultId = undefined;
exports.precompile = precompile;

var _syntax = require('@glimmer/syntax');

var _templateCompiler = require('./template-compiler');

var _templateCompiler2 = _interopRequireDefault(_templateCompiler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultId = exports.defaultId = (() => {
    if (typeof require === 'function') {
        try {
            /* tslint:disable:no-require-imports */
            const crypto = require('crypto');
            /* tslint:enable:no-require-imports */
            let idFn = src => {
                let hash = crypto.createHash('sha1');
                hash.update(src, 'utf8');
                // trim to 6 bytes of data (2^48 - 1)
                return hash.digest('base64').substring(0, 8);
            };
            idFn('test');
            return idFn;
        } catch (e) {}
    }
    return function idFn() {
        return null;
    };
})();
const defaultOptions = {
    id: defaultId,
    meta: {}
};
function precompile(string, options = defaultOptions) {
    let ast = (0, _syntax.preprocess)(string, options);
    let { meta } = options;
    let { block } = _templateCompiler2.default.compile(ast, options);
    let idFn = options.id || defaultId;
    let blockJSON = JSON.stringify(block.toJSON());
    let templateJSONObject = {
        id: idFn(JSON.stringify(meta) + blockJSON),
        block: blockJSON,
        meta: meta
    };
    // JSON is javascript
    return JSON.stringify(templateJSONObject);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9jb21waWxlci9saWIvY29tcGlsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxBQUFPLEFBQUUsQUFBVSxBQUFFLEFBQU0sQUFBaUIsQUFBQzs7QUFDN0MsQUFBTyxBQUFvQyxBQUFNLEFBQXFCLEFBQUMsQUFtQnZFLEFBQU07Ozs7OztNQUFPLEFBQVMsaUNBQWtCLEFBQUcsQUFBRSxNQUMzQztRQUFJLE9BQU8sQUFBTyxZQUFLLEFBQVUsWUFBRSxBQUNqQztZQUFJLEFBQ0YsQUFBdUM7QUFDdkM7a0JBQU0sQUFBTSxTQUFHLEFBQU8sUUFBQyxBQUFRLEFBQUMsQUFBQyxBQUNqQyxBQUFzQztBQUV0QztnQkFBSSxBQUFJLE9BQWlCLEFBQUcsQUFBQyxBQUFFLE9BQzdCO29CQUFJLEFBQUksT0FBRyxBQUFNLE9BQUMsQUFBVSxXQUFDLEFBQU0sQUFBQyxBQUFDLEFBQ3JDLEFBQUk7cUJBQUMsQUFBTSxPQUFDLEFBQUcsS0FBRSxBQUFNLEFBQUMsQUFBQyxBQUN6QixBQUFxQztBQUNyQzt1QkFBTyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQVEsQUFBQyxVQUFDLEFBQVMsVUFBQyxBQUFDLEdBQUUsQUFBQyxBQUFDLEFBQUMsQUFDL0MsQUFBQyxBQUFDO0FBRUYsQUFBSTtpQkFBQyxBQUFNLEFBQUMsQUFBQyxBQUViO21CQUFPLEFBQUksQUFBQyxBQUNiO1VBQUMsT0FBTyxBQUFDLEdBQUUsQUFBRSxDQUNmO0FBRUQ7V0FBTyxnQkFDTDtlQUFPLEFBQUksQUFBQyxBQUNkLEFBQUMsQUFBQyxBQUNKO0FBQUMsQUFBQyxBQUFFLEFBQUM7QUF2QkUsQUFBZ0M7QUF5QnZDLE1BQU0sQUFBYztRQUNkLEFBQVMsQUFDYixBQUFJO1VBRm9DLEFBRWxDLEFBQUUsQUFDVCxBQUFDLEFBaUJGLEFBQU07QUFuQkosQUFBRTtvQkFvQkYsQUFBYyxRQUNkLFVBQTZCLEFBQWMsZ0JBRTNDO1FBQUksQUFBRyxNQUFHLEFBQVUsd0JBQUMsQUFBTSxRQUFFLEFBQU8sQUFBQyxBQUFDLEFBQ3RDO1FBQUksRUFBRSxBQUFJLEFBQUUsU0FBRyxBQUFPLEFBQUMsQUFDdkI7UUFBSSxFQUFFLEFBQUssQUFBRSxVQUFHLEFBQWdCLDJCQUFDLEFBQU8sUUFBQyxBQUFHLEtBQUUsQUFBTyxBQUFDLEFBQUMsQUFDdkQ7UUFBSSxBQUFJLE9BQUcsQUFBTyxRQUFDLEFBQUUsTUFBSSxBQUFTLEFBQUMsQUFDbkM7UUFBSSxBQUFTLFlBQUcsQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFLLE1BQUMsQUFBTSxBQUFFLEFBQUMsQUFBQyxBQUMvQztRQUFJLEFBQWtCO1lBQ2hCLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQUksQUFBQyxRQUFHLEFBQVMsQUFBQyxBQUMxQyxBQUFLO2VBQUUsQUFBUyxBQUNoQixBQUFJO2NBSGtFLEFBR2hFLEFBQW9CLEFBQzNCLEFBQUMsQUFFRixBQUFxQjtBQUxuQixBQUFFO0FBTUo7V0FBTyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQWtCLEFBQUMsQUFBQyxBQUM1QyxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJlcHJvY2VzcyB9IGZyb20gJ0BnbGltbWVyL3N5bnRheCc7XG5pbXBvcnQgVGVtcGxhdGVDb21waWxlciwgeyBDb21waWxlT3B0aW9ucyB9IGZyb20gJy4vdGVtcGxhdGUtY29tcGlsZXInO1xuaW1wb3J0IHtcbiAgU2VyaWFsaXplZFRlbXBsYXRlV2l0aExhenlCbG9jayxcbiAgVGVtcGxhdGVKYXZhc2NyaXB0LFxuICBUZW1wbGF0ZU1ldGEsXG59IGZyb20gJ0BnbGltbWVyL3dpcmUtZm9ybWF0JztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgUHJlcHJvY2Vzc09wdGlvbnMgfSBmcm9tICdAZ2xpbW1lci9zeW50YXgnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRlbXBsYXRlSWRGbiB7XG4gIChzcmM6IHN0cmluZyk6IE9wdGlvbjxzdHJpbmc+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFByZWNvbXBpbGVPcHRpb25zIGV4dGVuZHMgQ29tcGlsZU9wdGlvbnMsIFByZXByb2Nlc3NPcHRpb25zIHtcbiAgaWQ/OiBUZW1wbGF0ZUlkRm47XG59XG5cbmRlY2xhcmUgZnVuY3Rpb24gcmVxdWlyZShpZDogc3RyaW5nKTogYW55O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdElkOiBUZW1wbGF0ZUlkRm4gPSAoKCkgPT4ge1xuICBpZiAodHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tcmVxdWlyZS1pbXBvcnRzICovXG4gICAgICBjb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbiAgICAgIC8qIHRzbGludDplbmFibGU6bm8tcmVxdWlyZS1pbXBvcnRzICovXG5cbiAgICAgIGxldCBpZEZuOiBUZW1wbGF0ZUlkRm4gPSBzcmMgPT4ge1xuICAgICAgICBsZXQgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGExJyk7XG4gICAgICAgIGhhc2gudXBkYXRlKHNyYywgJ3V0ZjgnKTtcbiAgICAgICAgLy8gdHJpbSB0byA2IGJ5dGVzIG9mIGRhdGEgKDJeNDggLSAxKVxuICAgICAgICByZXR1cm4gaGFzaC5kaWdlc3QoJ2Jhc2U2NCcpLnN1YnN0cmluZygwLCA4KTtcbiAgICAgIH07XG5cbiAgICAgIGlkRm4oJ3Rlc3QnKTtcblxuICAgICAgcmV0dXJuIGlkRm47XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBpZEZuKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xufSkoKTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IFByZWNvbXBpbGVPcHRpb25zID0ge1xuICBpZDogZGVmYXVsdElkLFxuICBtZXRhOiB7fSxcbn07XG5cbi8qXG4gKiBDb21waWxlIGEgc3RyaW5nIGludG8gYSB0ZW1wbGF0ZSBqYXZhc2NyaXB0IHN0cmluZy5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICogICAgIGltcG9ydCB7IHByZWNvbXBpbGUgfSBmcm9tICdAZ2xpbW1lci9jb21waWxlcic7XG4gKiAgICAgaW1wb3J0IHsgdGVtcGxhdGVGYWN0b3J5IH0gZnJvbSAnZ2xpbWVyLXJ1bnRpbWUnO1xuICogICAgIGxldCB0ZW1wbGF0ZUpzID0gcHJlY29tcGlsZShcIkhvd2R5IHt7bmFtZX19XCIpO1xuICogICAgIGxldCBmYWN0b3J5ID0gdGVtcGxhdGVGYWN0b3J5KG5ldyBGdW5jdGlvbihcInJldHVybiBcIiArIHRlbXBsYXRlSnMpKCkpO1xuICogICAgIGxldCB0ZW1wbGF0ZSA9IGZhY3RvcnkuY3JlYXRlKGVudik7XG4gKlxuICogQG1ldGhvZCBwcmVjb21waWxlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIGEgR2xpbW1lciB0ZW1wbGF0ZSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ30gYSB0ZW1wbGF0ZSBqYXZhc2NyaXB0IHN0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlY29tcGlsZShzdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFByZWNvbXBpbGVPcHRpb25zKTogVGVtcGxhdGVKYXZhc2NyaXB0O1xuZXhwb3J0IGZ1bmN0aW9uIHByZWNvbXBpbGUoXG4gIHN0cmluZzogc3RyaW5nLFxuICBvcHRpb25zOiBQcmVjb21waWxlT3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zXG4pOiBUZW1wbGF0ZUphdmFzY3JpcHQge1xuICBsZXQgYXN0ID0gcHJlcHJvY2VzcyhzdHJpbmcsIG9wdGlvbnMpO1xuICBsZXQgeyBtZXRhIH0gPSBvcHRpb25zO1xuICBsZXQgeyBibG9jayB9ID0gVGVtcGxhdGVDb21waWxlci5jb21waWxlKGFzdCwgb3B0aW9ucyk7XG4gIGxldCBpZEZuID0gb3B0aW9ucy5pZCB8fCBkZWZhdWx0SWQ7XG4gIGxldCBibG9ja0pTT04gPSBKU09OLnN0cmluZ2lmeShibG9jay50b0pTT04oKSk7XG4gIGxldCB0ZW1wbGF0ZUpTT05PYmplY3Q6IFNlcmlhbGl6ZWRUZW1wbGF0ZVdpdGhMYXp5QmxvY2s8VGVtcGxhdGVNZXRhPiA9IHtcbiAgICBpZDogaWRGbihKU09OLnN0cmluZ2lmeShtZXRhKSArIGJsb2NrSlNPTiksXG4gICAgYmxvY2s6IGJsb2NrSlNPTixcbiAgICBtZXRhOiBtZXRhIGFzIFRlbXBsYXRlTWV0YSxcbiAgfTtcblxuICAvLyBKU09OIGlzIGphdmFzY3JpcHRcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRlbXBsYXRlSlNPTk9iamVjdCk7XG59XG4iXX0=