import { CompilerOps, Processor, Op, OpName, TemplateCompilerOps, PathHead } from './compiler-ops';
import { AST } from '@glimmer/syntax';
import { Option, Opaque } from '@glimmer/interfaces';
import { SymbolTable } from './template-visitor';
export declare type InVariable = PathHead;
export declare type OutVariable = number;
export declare type OutOp<K extends keyof CompilerOps<OutVariable> = OpName> = Op<OutVariable, CompilerOps<OutVariable>, K>;
export declare type InOp<K extends keyof TemplateCompilerOps = keyof TemplateCompilerOps> = Op<PathHead, TemplateCompilerOps, K>;
export declare class SymbolAllocator implements Processor<CompilerOps<InVariable>, OutVariable, CompilerOps<OutVariable>> {
    private ops;
    private symbolStack;
    constructor(ops: Array<InOp>);
    process(): OutOp[];
    dispatch<O extends InOp>(op: O): Opaque;
    readonly symbols: SymbolTable;
    startProgram(op: AST.Program): void;
    endProgram(_op: null): void;
    startBlock(op: AST.Program): void;
    endBlock(_op: null): void;
    flushElement(op: AST.ElementNode): void;
    closeElement(_op: AST.ElementNode): void;
    closeComponent(_op: AST.ElementNode): void;
    closeDynamicComponent(_op: AST.ElementNode): void;
    attrSplat(_op: Option<InVariable>): OutOp<'attrSplat'>;
    get(op: [InVariable, string[]]): OutOp<'get' | 'maybeLocal'>;
    maybeGet(op: [InVariable, string[]]): OutOp<'get' | 'unknown' | 'maybeLocal'>;
    yield(op: InVariable): OutOp<'yield'>;
    debugger(_op: Option<InVariable[]>): OutOp<'debugger'>;
    hasBlock(op: InVariable): OutOp<'hasBlock'>;
    hasBlockParams(op: InVariable): OutOp<'hasBlockParams'>;
    partial(_op: Option<InVariable[]>): OutOp<'partial'>;
    text(_op: string): void;
    comment(_op: string): void;
    openComponent(_op: AST.ElementNode): void;
    openElement(_op: AST.ElementNode): void;
    openSplattedElement(_op: AST.ElementNode): void;
    staticArg(_op: string): void;
    dynamicArg(_op: string): void;
    staticAttr(_op: [string, Option<string>]): void;
    trustingAttr(_op: [string, Option<string>]): void;
    dynamicAttr(_op: [string, Option<string>]): void;
    modifier(_op: string): void;
    append(_op: boolean): void;
    block(_op: [string, number, Option<number>]): void;
    literal(_op: string | boolean | number | null | undefined): void;
    helper(_op: string): void;
    unknown(_op: string): void;
    maybeLocal(_op: string[]): void;
    prepareArray(_op: number): void;
    prepareObject(_op: number): void;
    concat(_op: null): void;
}
